{"hash":"97816ef43d65a9726b911ff76cd96eb6e4c1c61d","data":{"markdownPage":{"id":"d5b4fe81ffbc42dc2caedcbf9a6ac452","title":"파일공유를 위한 NAS 스토리지 생성과 설정","description":"","path":"/operations/ops-persistence-volume-efs/","timeToRead":6,"content":"<h1 id=\"파일공유를-위한-nas-스토리지-생성과-설정\"><a href=\"#%ED%8C%8C%EC%9D%BC%EA%B3%B5%EC%9C%A0%EB%A5%BC-%EC%9C%84%ED%95%9C-nas-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일공유를 위한 NAS 스토리지 생성과 설정</h1>\n<h2 id=\"주문서비스에-nfs-연결하기\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-nfs-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스에 NFS 연결하기</h2>\n<p>이번 랩에서는 여러 마이크로서비스간 파일 공유를 위해 일반적으로 NAS(Network Attached Storage)로 알려진 NFS 파일시스템을 AWS 클라우드에 생성하고, 이를 주문서비스에서 마운트시켜 스토리지로 활용하는 예제를 실습한다.</p>\n<p>먼저, emptyDir, hostPath 유형에 실습한다.</p>\n<h3 id=\"emptydir-volume\"><a href=\"#emptydir-volume\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EmptyDir Volume</h3>\n<ul>\n<li>한 Pod 내에서 컨테이너들간 공유가능한 볼륨 유형이다.</li>\n<li>먼저, 아래 YAML로 Volume을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f -&lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: shared-volumes\nspec:\n  containers:\n  - image: redis\n    name: redis\n    volumeMounts:\n    - name: shared-storage\n      mountPath: /data/shared\n  - image: nginx\n    name: nginx\n    volumeMounts:\n    - name: shared-storage\n      mountPath: /data/shared\n  volumes:\n  - name: shared-storage\n    emptyDir: {}\nEOF</code></pre>\n<ul>\n<li>Pod내 한 컨테이너에서 생성한 볼륨이 다른 컨테이너에서 가시적인지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it shared-volumes --container redis -- /bin/bash\ncd /data/shared\necho test… &gt; test.txt\nexit</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it shared-volumes --container nginx -- /bin/bash\ncd /data/shared\nls</code></pre>\n<h3 id=\"hostpath-volume\"><a href=\"#hostpath-volume\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HostPath Volume</h3>\n<ul>\n<li>예제는 컨테이너가 바인딩된 워커노드의 /tmp 폴더를 공유하는 설정이다.</li>\n<li>먼저, 아래 YAML로 Volume을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f -&lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hostpath\nspec:\n  containers:\n  - name: redis\n    image: redis\n    volumeMounts:\n    - name: somepath\n      mountPath: /data/shared\n  volumes:\n  - name : somepath\n    hostPath:\n      path: /tmp\n      type: Directory\nEOF</code></pre>\n<ul>\n<li>컨테이너로 접속하여 마운트된 볼륨을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/hostpath -- /bin/sh\nls -al /data/shared</code></pre>\n<h3 id=\"주문서비스에-nfs-volume-연동-순서\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-nfs-volume-%EC%97%B0%EB%8F%99-%EC%88%9C%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스에 NFS Volume 연동 순서</h3>\n<pre class=\"language-text\"><code class=\"language-text\">1. EFS 파일시스템 생성 \n2. Kubernetes 서비스 계정과 IAM 역할 연결\n3. Cluster에 EFS CSI 드라이버 설치 \n4. EFS csi Driver로 StorageClass 생성 \n5. PVC 생성 및 Pod에 연결 </code></pre>\n<h3 id=\"helm-must-be-installed-on-my-machine\"><a href=\"#helm-must-be-installed-on-my-machine\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Helm must be installed on My Machine</h3>\n<ul>\n<li>Helm 3.x 설치(권장)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 &gt; get_helm.sh\nchmod 700 get_helm.sh\n./get_helm.sh</code></pre>\n<h2 id=\"efs-iam-policy-생성do-not-run-following-two-commands-admin-only\"><a href=\"#efs-iam-policy-%EC%83%9D%EC%84%B1do-not-run-following-two-commands-admin-only\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EFS IAM Policy 생성(DO NOT run following two commands, Admin Only)</h2>\n<ul>\n<li>IAM에 보안자격증명으로 사용가능한 EFS 정책을 설정한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Download the IAM policy document (Cloud Administrator Only)\ncurl -S https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json -o iam-policy.json\n\n# Create an IAM policy (Cloud Administrator Only)\naws iam create-policy \\\n  --policy-name EFSCSIControllerIAMPolicy \\\n  --policy-document file://iam-policy.json </code></pre>\n<h3 id=\"1-efs-파일시스템-생성\"><a href=\"#1-efs-%ED%8C%8C%EC%9D%BC%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. EFS 파일시스템 생성</h3>\n<ul>\n<li>관리콘솔에 접속하여, 'EFS' 서비스 이름으로 검색한다.</li>\n<li>EFS 서비스에서 파일 시스템을 생성한다.</li>\n<li>\n<p>이후, 교재를 참고하여 보안그룹을 추가 구성한다.</p>\n<ul>\n<li>파일시스템 > 네트워크 탭에서 가용영역별 ClusterSharedNodeSecurityGroup 추가</li>\n</ul>\n</li>\n<li>생성된 파일시스템 Id(fs-xxxxxxxxxx)를 복사한다.</li>\n</ul>\n<h3 id=\"2-kubernetes-서비스-계정과-iam-역할-연결\"><a href=\"#2-kubernetes-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%A0%95%EA%B3%BC-iam-%EC%97%AD%ED%95%A0-%EC%97%B0%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Kubernetes 서비스 계정과 IAM 역할 연결</h3>\n<ul>\n<li>구성에 필요한 환경변수를 설정한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">export AWS_ROOT_UID=xxxxxxxxxx\nexport REGION=xxxxxxxxxx\nexport CLUSTER_NAME=xxxxxxxxxx\nexport FILE_SYSTEM_ID=fs-xxxxxxxxxx</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\"># AWS_ROOT_UID는 다음 Command로 찾을 수 있다.\naws sts get-caller-identity --query Account --output text</code></pre>\n<ul>\n<li>Kubernetes에 SA를 생성하고, 이를 IAM 정책과 연결한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">eksctl create iamserviceaccount \\\n  --override-existing-serviceaccounts \\\n  --region $REGION \\\n  --name efs-csi-controller-sa \\\n  --namespace kube-system \\\n  --cluster $CLUSTER_NAME \\\n  --attach-policy-arn arn:aws:iam::$AWS_ROOT_UID:policy/EFSCSIControllerIAMPolicy \\\n  --approve </code></pre>\n<h3 id=\"3-cluster에-efs-csi-드라이버-설치\"><a href=\"#3-cluster%EC%97%90-efs-csi-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Cluster에 EFS CSI 드라이버 설치</h3>\n<ul>\n<li>Region별 드라이버 설치 이미지 레지스트리를 복사한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 이미지 저장소 참고사이트 : https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/add-ons-images.html</code></pre>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/8829fd8f-c1bd-4aee-82ce-5d5887248810\" alt=\"image\"></p>\n<ul>\n<li>복사한 레지스트리를 아래, [리전별 이미지 저장소]에 붙여넣고, 실행한다. ([] 삭제)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver\nhelm repo update\nhelm upgrade -i aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \\\n  --namespace kube-system \\\n  --set image.repository=[리전별 이미지 저장소]/eks/aws-efs-csi-driver \\\n  --set controller.serviceAccount.create=false \\\n  --set controller.serviceAccount.name=efs-csi-controller-sa</code></pre>\n<h3 id=\"4-efs-csi-driver로-storageclass-생성\"><a href=\"#4-efs-csi-driver%EB%A1%9C-storageclass-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. EFS csi Driver로 StorageClass 생성</h3>\n<ul>\n<li>설치한 CSI 드라이버로 StorageClass를 등록한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: efs-sc\nprovisioner: efs.csi.aws.com\nparameters:\n  provisioningMode: efs-ap\n  fileSystemId: $FILE_SYSTEM_ID\n  directoryPerms: &quot;700&quot;\nEOF</code></pre>\n<ul>\n<li>EFS를 위한 Provisioner가 추가되어 사용 가능하다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get storageclass</code></pre>\n<ul>\n<li>추가된 efs-sc 스토리지 클래스가 기존 ebs-sc와 함께 조회된다.</li>\n</ul>\n<h3 id=\"5-pvc-생성-및-pod에-연결\"><a href=\"#5-pvc-%EC%83%9D%EC%84%B1-%EB%B0%8F-pod%EC%97%90-%EC%97%B0%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. PVC 생성 및 Pod에 연결</h3>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: nfs-pvc\n  labels:\n    app: test-pvc\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 1Mi\n  storageClassName: efs-sc\nEOF</code></pre>\n<h4 id=\"생성된-pvc-조회\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-pvc-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성된 pvc 조회</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get pvc</code></pre>\n<ul>\n<li>아래와 같은 결과가 출력되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME      STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nnfs-pvc   Bound                                        aws-efs        59s</code></pre>\n<h4 id=\"nfs-볼륨을-가지는-주문마이크로서비스-배포\"><a href=\"#nfs-%EB%B3%BC%EB%A5%A8%EC%9D%84-%EA%B0%80%EC%A7%80%EB%8A%94-%EC%A3%BC%EB%AC%B8%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NFS 볼륨을 가지는 주문마이크로서비스 배포</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: &quot;apps/v1&quot;\nkind: &quot;Deployment&quot;\nmetadata: \n  name: order\n  labels: \n    app: &quot;order&quot;\nspec: \n  selector: \n    matchLabels: \n      app: &quot;order&quot;\n  replicas: 1\n  template: \n    metadata: \n      labels: \n        app: &quot;order&quot;\n    spec: \n      containers: \n      - name: &quot;order&quot;\n        image: &quot;ghcr.io/acmexii/order-liveness:latest&quot;\n        ports: \n          - containerPort: 80\n        volumeMounts:\n          - mountPath: &quot;/mnt/data&quot;\n            name: volume\n      volumes:\n      - name: volume\n        persistentVolumeClaim:\n          claimName: nfs-pvc  \nEOF</code></pre>\n<ul>\n<li>배포 후 주문 컨테이너에 접속하여 제대로 파일시스템이 마운트되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get all\nkubectl exec -it [pod/ORDER POD 객체] -- /bin/sh\ncd /mnt/data\necho &quot;NFS Strorage Test.. &quot; &gt; test.txt</code></pre>\n<ul>\n<li>이후, 주문서비스를 2개로 Scale Out하고 확장된 주문 서비스에서도 test.txt가 확인되는지 검증한다.</li>\n<li>또한, 2번째 컨테이너에서도 리소스를 생성해 본다. (ReadWriteMany)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl scale deploy order --replicas=2\nkubectl exec -it [pod/ORDER POD 객체] -- /bin/sh\nls /mnt/data\necho &quot;NFS Strorage Test2.. &quot; &gt; test2.txt</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"파일공유를 위한 NAS 스토리지 생성과 설정","anchor":"#파일공유를-위한-nas-스토리지-생성과-설정"},{"depth":2,"value":"주문서비스에 NFS 연결하기","anchor":"#주문서비스에-nfs-연결하기"},{"depth":3,"value":"EmptyDir Volume","anchor":"#emptydir-volume"},{"depth":3,"value":"HostPath Volume","anchor":"#hostpath-volume"},{"depth":3,"value":"주문서비스에 NFS Volume 연동 순서","anchor":"#주문서비스에-nfs-volume-연동-순서"},{"depth":3,"value":"Helm must be installed on My Machine","anchor":"#helm-must-be-installed-on-my-machine"},{"depth":2,"value":"EFS IAM Policy 생성(DO NOT run following two commands, Admin Only)","anchor":"#efs-iam-policy-생성do-not-run-following-two-commands-admin-only"},{"depth":3,"value":"1. EFS 파일시스템 생성","anchor":"#1-efs-파일시스템-생성"},{"depth":3,"value":"2. Kubernetes 서비스 계정과 IAM 역할 연결","anchor":"#2-kubernetes-서비스-계정과-iam-역할-연결"},{"depth":3,"value":"3. Cluster에 EFS CSI 드라이버 설치","anchor":"#3-cluster에-efs-csi-드라이버-설치"},{"depth":3,"value":"4. EFS csi Driver로 StorageClass 생성","anchor":"#4-efs-csi-driver로-storageclass-생성"},{"depth":3,"value":"5. PVC 생성 및 Pod에 연결","anchor":"#5-pvc-생성-및-pod에-연결"},{"depth":4,"value":"생성된 pvc 조회","anchor":"#생성된-pvc-조회"},{"depth":4,"value":"NFS 볼륨을 가지는 주문마이크로서비스 배포","anchor":"#nfs-볼륨을-가지는-주문마이크로서비스-배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"구글 드라이브 예제"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/custom-template/designing-template/","title":"커스텀 템플릿 만들기"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/custom-template/","title":"커스텀 템플릿 객체별 속성"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}