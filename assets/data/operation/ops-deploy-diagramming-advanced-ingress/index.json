{"hash":"2709401bd617192191f6741432e7f4db090dba19","data":{"markdownPage":{"id":"3bf3d7ce33d82412a927bbed40806640","title":"Ingress 배포모델 설계","description":"","path":"/operation/ops-deploy-diagramming-advanced-ingress/","timeToRead":5,"content":"<h1 id=\"ingress-배포모델-설계\"><a href=\"#ingress-%EB%B0%B0%ED%8F%AC%EB%AA%A8%EB%8D%B8-%EC%84%A4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress 배포모델 설계</h1>\n<h2 id=\"instruction\"><a href=\"#instruction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Instruction</h2>\n<p>주어진 12번가 이벤트스토밍 모델을 기반으로, MSA-Ez가 제공하는 쿠버네티스 오브젝트 생성을 위한 배포 모델링 도구를 활용해 메니페스트 YAML을 자동 생성하고 이를 적용해 본다.</p>\n<h2 id=\"이벤트스토밍-모델-준비\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%B0%8D-%EB%AA%A8%EB%8D%B8-%EC%A4%80%EB%B9%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트스토밍 모델 준비</h2>\n<ul>\n<li>아래 모델을 새 탭에서 로딩한다.\n<a href=\"https://www.msaez.io/#/storming/mallbasic-for-ops\" target=\"_blank\" rel=\"noopener noreferrer\">모델 링크 : https://www.msaez.io/#/storming/mallbasic-for-ops</a></li>\n<li>브라우져에 모델이 로딩되지 않으면, 우측 상단의 (사람모양) 아바타 아이콘을 클릭하여 <strong>반드시</strong> 깃헙(Github) 계정으로 로그인 후, 리로드 한다.</li>\n<li>아래처럼 주문, 배송, 상품으로 구성된 12번가 이벤트스토밍 기본 모델이 출력된다.   </li>\n<li>로딩된 모델은 우측 팔레트 영역에 스티커 목록이 나타나지 않는다. 상단 메뉴영역에서 포크 아이콘(FORK)을 클릭해 주어진 모델을 복제한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/1e16e849-7ae9-4b33-b39c-db4ef0939507\" alt=\"image\"></li>\n<li>우측 팔레트 영역에 스티커 목록들이 나타나는 것이 확인된다.</li>\n</ul>\n<h2 id=\"배포-모델링\"><a href=\"#%EB%B0%B0%ED%8F%AC-%EB%AA%A8%EB%8D%B8%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배포 모델링</h2>\n<ul>\n<li>Fork된 모델에 Ingress 토핑을 추가하자. </li>\n<li>Ingress 토핑 추가는 메뉴에서 'Code' > 'Preview' > 'Toppings' 에서 아래처럼 Service Mesh 하위의 Ingress를 체크 하기만 하면 된다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/a55fc02b-2c67-492e-a233-10aee09d3cee\" alt=\"image\"></li>\n<li>Ingress가 적용된 상태에서 모델 상단 메뉴의 'DEPLOY'를 클릭한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/07d45fce-528a-4261-a1e3-c100e068c6b0\" alt=\"image\"></li>\n<li>아래 그럼처럼 쿠버네티스 기본 배포모형인 Service와 Deployment를 가진 서비스 상단에 Ingress 도식이 추가되어 나타난다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/9a3ffc7d-4910-4b6f-b3a7-0178f15abb17\" alt=\"image\"></li>\n<li>또한, Ingress 게이트웨이에서 각 단위 서비스로 라우팅되는 패스(path) 이름이 자동으로 설정되어 보인다.</li>\n<li>이전 랩(12st Mall 배포 모델 다이어그래밍과 활용)과 동일하게, Cloud IDE를 활용해 비즈니스 로직을 완성하고, 모든 서비스에서 대해 도커 이미지를 생성(도커라이징)하고 저장소에 푸쉬한다.</li>\n<li>주문(order) 서비스의 경우,</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn package -B -Dmaven.test.skip=true\ndocker build -t [dockerhub ID]/order:v1 .     \ndocker image ls\ndocker push [dockerhub ID]/order:v1 .</code></pre>\n<ul>\n<li>각 서비스의 Deployment 객체 모형을 클릭해 나타나는 속성창에서 이미지를 아래처럼 입력한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/936467d7-be76-4686-97f5-fe592786831b\" alt=\"image\"></li>\n<li>배포 모델 우측 상단의 'KUBECTL'을 클릭하여 배포 매니페스트 YAML을 확인한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/97cdb8d0-2c87-4f1d-a464-e63df1540556\" alt=\"image\"></li>\n<li>Ingress를 포함하여 설정한 배포 스펙들이 하나의 YAML로 머지되어 template.yml 상에서 조회된다.</li>\n</ul>\n<h2 id=\"클러스터에-수동으로-배포하기\"><a href=\"#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EC%88%98%EB%8F%99%EC%9C%BC%EB%A1%9C-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클러스터에 수동으로 배포하기</h2>\n<ul>\n<li>설정된 클러스터 컨텍스트상에서 클라이언트(kubectl)을 활용해 수동으로 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f kubernetes/template/template.yml</code></pre>\n<ul>\n<li>Ingress Controller가 없을 경우, Helm으로 Ingress Controller를 설치해 준다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add stable https://charts.helm.sh/stable\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nkubectl create namespace ingress-basic\n\nhelm install nginx-ingress ingress-nginx/ingress-nginx --namespace=ingress-basic</code></pre>\n<ul>\n<li>배포 결과를 조회해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get ingress -o yaml </code></pre>\n<ul>\n<li>다음과 같이 배포된 Ingress 라우팅 스펙이 조회되어 출력된다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: v1\nitems:\n- apiVersion: networking.k8s.io/v1\n  kind: Ingress\n  metadata:\n    annotations:\n    ...\n    ...\n  spec:\n    rules:\n    - http:\n        paths:\n        - backend:\n            service:\n              name: order\n              port:\n                number: 8080\n          path: /orders\n          pathType: Prefix\n        - backend:\n            service:\n              name: product\n              port:\n                number: 8080\n          path: /products\n          pathType: Prefix\n        - backend:\n            service:\n              name: delivery\n              port:\n                number: 8080\n          path: /deliveries\n          pathType: Prefix\n    ...\n    ...          </code></pre>\n<h2 id=\"on-prem-msa-ez-배포-이해\"><a href=\"#on-prem-msa-ez-%EB%B0%B0%ED%8F%AC-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>On-Prem MSA-Ez 배포 이해</h2>\n<ul>\n<li>On-Prem MSA-Ez에는 마이크로서비스를 빌드하고 배포하는 자동화된 툴-체인들이 제공된다. </li>\n<li>기본적으로 이벤트스토밍 모델 버전에 따라, 각 서비스 이미지들이 태깅되어 빌드되고 구성된 Harbor 컨테이너 레지스트리에 이미지가 푸쉬된다.</li>\n<li>이에 따라 매니페스트 YAML이 업데이트되고 GitOps 설정에 따라 Argo CD가 이를 탐지하여 설정된 클러스터에 자동 배포가 이루어진다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/4a51c1e3-400f-4d5b-8d0a-edb742f12e94\" alt=\"image\"></li>\n<li>Argo 엔드포인트를 조회한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc argocd-server -n argocd</code></pre>\n<ul>\n<li>브라우저에서 앤드포인트에 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">ID : admin\npassword : kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d</code></pre>\n<ul>\n<li>설정된 배포 전략에 따른 배포 진행 조회 및 배포 결과는 아래와 같이 확인 가능하다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/930147fa-8cac-4691-9e4a-dcbcbe1bca60\" alt=\"image\"></li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Ingress 배포모델 설계","anchor":"#ingress-배포모델-설계"},{"depth":2,"value":"Instruction","anchor":"#instruction"},{"depth":2,"value":"이벤트스토밍 모델 준비","anchor":"#이벤트스토밍-모델-준비"},{"depth":2,"value":"배포 모델링","anchor":"#배포-모델링"},{"depth":2,"value":"클러스터에 수동으로 배포하기","anchor":"#클러스터에-수동으로-배포하기"},{"depth":2,"value":"On-Prem MSA-Ez 배포 이해","anchor":"#on-prem-msa-ez-배포-이해"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/si-gpt/","title":"ChatGPT 기반 구현 및 디버깅 자동화"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/model-driven/","title":"빌드"}},{"node":{"path":"/tool/google-drive-examples/","title":"빠른 시작 (End-to-End 프로젝트)"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 구조"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/for-loop/","title":"반복문"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/custom-template/conditional-statement/","title":"조건문"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/business/","title":"12번가 쇼핑몰 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}