{"hash":"2709401bd617192191f6741432e7f4db090dba19","data":{"markdownPage":{"id":"60f6b7468136bd9c39ddc44a6d025155","title":"자동확장(HPA) 배포","description":"","path":"/operation/ops-deploy-diagramming-advanced-hpa/","timeToRead":5,"content":"<h1 id=\"자동확장hpa-배포\"><a href=\"#%EC%9E%90%EB%8F%99%ED%99%95%EC%9E%A5hpa-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자동확장(HPA) 배포</h1>\n<h2 id=\"instruction\"><a href=\"#instruction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Instruction</h2>\n<p>주어진 12번가 이벤트스토밍 모델을 기반으로, MSA-Ez가 제공하는 쿠버네티스 오브젝트 생성을 위한 배포 모델링 도구를 활용해 워크로드 자동확장(HPA) 메니페스트를 모델링하여 이를 클러스터에 적용해 본다.</p>\n<h2 id=\"이벤트스토밍-모델-준비\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%B0%8D-%EB%AA%A8%EB%8D%B8-%EC%A4%80%EB%B9%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트스토밍 모델 준비</h2>\n<ul>\n<li>아래 모델을 새 탭에서 로딩한다.\n<a href=\"https://www.msaez.io/#/storming/mallbasic-for-ops\" target=\"_blank\" rel=\"noopener noreferrer\">모델 링크 : https://www.msaez.io/#/storming/mallbasic-for-ops</a></li>\n<li>브라우져에 모델이 로딩되지 않으면, 우측 상단의 (사람모양) 아바타 아이콘을 클릭하여 <strong>반드시</strong> 깃헙(Github) 계정으로 로그인 후, 리로드 한다.</li>\n<li>아래처럼 주문, 배송, 상품으로 구성된 12번가 이벤트스토밍 기본 모델이 출력된다.   </li>\n<li>로딩된 모델은 우측 팔레트 영역에 스티커 목록이 나타나지 않는다. 상단 메뉴영역에서 포크 아이콘(FORK)을 클릭해 주어진 모델을 복제한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/1e16e849-7ae9-4b33-b39c-db4ef0939507\" alt=\"image\"></li>\n<li>우측 팔레트 영역에 스티커 목록들이 나타나는 것이 확인된다.</li>\n</ul>\n<h2 id=\"배포-모델링\"><a href=\"#%EB%B0%B0%ED%8F%AC-%EB%AA%A8%EB%8D%B8%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배포 모델링</h2>\n<ul>\n<li>Fork된 모델에 Ingress 토핑을 추가하자. </li>\n<li>Ingress 토핑 추가는 메뉴에서 'Code' > 'Preview' > 'Toppings' 에서 아래처럼 Service Mesh 하위의 Ingress를 체크 하기만 하면 된다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/a55fc02b-2c67-492e-a233-10aee09d3cee\" alt=\"image\"></li>\n<li>Ingress가 적용된 상태에서 모델 상단 메뉴의 'DEPLOY'를 클릭한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/07d45fce-528a-4261-a1e3-c100e068c6b0\" alt=\"image\"></li>\n<li>아래 그럼처럼 쿠버네티스 기본 배포모형인 Service와 Deployment를 가진 서비스 상단에 Ingress 도식이 추가되어 나타난다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/9a3ffc7d-4910-4b6f-b3a7-0178f15abb17\" alt=\"image\"></li>\n<li>또한, Ingress 게이트웨이에서 각 단위 서비스로 라우팅되는 패스(path) 이름이 자동으로 설정되어 보인다.</li>\n<li>Cloud IDE를 활용해 각 서비스의 이미지를 생성하고 푸쉬한 다음, 생성한 이미지 이름을 Deployment 객체에 설정한다. </li>\n</ul>\n<h2 id=\"hpa-객체-모델링\"><a href=\"#hpa-%EA%B0%9D%EC%B2%B4-%EB%AA%A8%EB%8D%B8%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HPA 객체 모델링</h2>\n<ul>\n<li>HPA는 워크로드 리소스를 자동으로 업데이트하며, 워크로드의 크기를 수요에 맞게 자동으로 스케일링해 주는 객체이다. </li>\n<li>모델링 도구영역에서 'Autoscaler' > 'Horizontal Pod Authscaler'을 선택해 HPA 스티커를 생성한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/5cc1cdf8-11e0-4fc0-a47a-14173c3317e8\" alt=\"image\"></li>\n<li>\n<p>생성한 HPA 스티커를 더블 클릭하여, 주문서비스를 위한 HPA 객체 정보를 아래와 같이 입력한다. </p>\n<blockquote>\n<p>Name : order-hpa\nReplicas : Min-1, Max-5\nResource Type : cpu\nAverageUtilization : 20</p>\n</blockquote>\n</li>\n<li>'order-hpa'와 Deployment 'order'를 매핑한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/ea13ad2b-ba9d-417f-88bc-1e624e4f5317\" alt=\"image\"></li>\n<li>\n<p>상품서비스에도  HPA 객체 정보를 아래와 같이 입력한다.</p>\n<blockquote>\n<p>Name : product-hpa\nReplicas : Min-1, Max-5\nResource Type : memory\nAverageUtilization : 20</p>\n</blockquote>\n</li>\n<li>'product-hpa'와 Deployment 'product'를 매핑한다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/5f863b49-842c-4482-be62-4399c6e143c8\" alt=\"image\"></li>\n</ul>\n<h2 id=\"클러스터에-배포하기\"><a href=\"#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클러스터에 배포하기</h2>\n<ul>\n<li>설정된 클러스터 컨텍스트상에서 클라이언트(kubectl)을 활용해 수동으로 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f kubernetes/template/template.yml</code></pre>\n<ul>\n<li>대상 클러스터에 Kafka가 설치되지 않은 경우, Helm으로 Kafka를 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm install my-kafka bitnami/kafka --version 23.0.5</code></pre>\n<ul>\n<li>Ingress Controller가 없을 경우, Ingress Controller도 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add stable https://charts.helm.sh/stable\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nkubectl create namespace ingress-basic\n\nhelm install nginx-ingress ingress-nginx/ingress-nginx --namespace=ingress-basic</code></pre>\n<ul>\n<li>생성된 주문서비스와 상품서비스의 HPA 객체를 조회한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get hpa</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">NAME          REFERENCE            TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\norder-hpa     Deployment/order     80%/20%   1         5         5          17m\nproduct-hpa   Deployment/product   51%/20%   1         5         5          17m</code></pre>\n<h2 id=\"워크로드-자동확장-동작-확인\"><a href=\"#%EC%9B%8C%ED%81%AC%EB%A1%9C%EB%93%9C-%EC%9E%90%EB%8F%99%ED%99%95%EC%9E%A5-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>워크로드 자동확장 동작 확인</h2>\n<ul>\n<li>먼저, 워크로드 생성을 위한 Pod를 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: siege\nspec:\n  containers:\n  - name: siege\n    image: apexacme/siege-nginx\nEOF</code></pre>\n<ul>\n<li>생성된 siege pod에 접속하여 주문서비스에 접속되는지 테스트 해본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -- /bin/bash\nsiege -c1 -t2S -v http://order:8080/orders</code></pre>\n<ul>\n<li>현재 주문서비스 인스턴스는 1개이며, 'siege' Pod 내에서 주문 서비스로 워크로드를 생성한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c20 -t40S -v http://order:8080/orders</code></pre>\n<ul>\n<li>부하가 가해짐에 따라 주문서비스는 부하량에 따라 설정된 임계치를 상회해 사용함을 알 수 있다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME          REFERENCE            TARGETS     MINPODS   MAXPODS   REPLICAS   AGE\norder-hpa     Deployment/order     422%/20%   1         5         5          22m\nproduct-hpa   Deployment/product   55%/20%     1         5         5          22m</code></pre>\n<ul>\n<li>오토스케일러가 주문 및 주문서비스가 사용하는 상품서비스를 자동으로 Scale Out 했음을 알 수 있다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get pod -l app=order\nNAME                     READY   STATUS    RESTARTS   AGE\norder-55498f4b8f-b99xx   2/2     Running   0          9m5s\norder-55498f4b8f-rsqdk   2/2     Running   0          9m19s\norder-55498f4b8f-x9rlr   2/2     Running   0          5h59m\norder-857878887c-64dnd   2/2     Running   0          9m19s\norder-857878887c-ggd6k   2/2     Running   0          9m5s</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get pod -l app=product\nNAME                       READY   STATUS    RESTARTS   AGE\nproduct-66d57b87db-4wqsv   2/2     Running   0          9m55s\nproduct-66d57b87db-5wkgv   2/2     Running   0          9m25s\nproduct-66d57b87db-n5tqt   2/2     Running   0          9m25s\nproduct-66d57b87db-r7ljp   2/2     Running   0          11m\nproduct-66d57b87db-zw8gw   2/2     Running   0          10m</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"자동확장(HPA) 배포","anchor":"#자동확장hpa-배포"},{"depth":2,"value":"Instruction","anchor":"#instruction"},{"depth":2,"value":"이벤트스토밍 모델 준비","anchor":"#이벤트스토밍-모델-준비"},{"depth":2,"value":"배포 모델링","anchor":"#배포-모델링"},{"depth":2,"value":"HPA 객체 모델링","anchor":"#hpa-객체-모델링"},{"depth":2,"value":"클러스터에 배포하기","anchor":"#클러스터에-배포하기"},{"depth":2,"value":"워크로드 자동확장 동작 확인","anchor":"#워크로드-자동확장-동작-확인"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/si-gpt/","title":"ChatGPT 기반 구현 및 디버깅 자동화"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/model-driven/","title":"빌드"}},{"node":{"path":"/tool/google-drive-examples/","title":"빠른 시작 (End-to-End 프로젝트)"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 구조"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/for-loop/","title":"반복문"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/custom-template/conditional-statement/","title":"조건문"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/business/","title":"12번가 쇼핑몰 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}