{"hash":"01c8fc0aa299ed820babcf78fc6fceb91b30672e","data":{"markdownPage":{"id":"15bf504980d5446888b114aa54017ac0","title":"커스텀 템플릿 디자인","description":"","path":"/custom-template/designing-template/","timeToRead":5,"content":"<h1 id=\"커스텀-템플릿-디자인\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀 템플릿 디자인</h1>\n<h2 id=\"템플릿-파일-생성\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>템플릿 파일 생성</h2>\n<p>이벤트스토밍 모델을 실제 소스 코드로 변환하기 위한 템플릿 파일 생성 방법입니다.</p>\n<p>다음 예시는 Axon 템플릿에서 AggregateRoot.java 파일의 소스 코드입니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">.forEach: Aggregate\nfileName: {{namePascalCase}}Aggregate.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/aggregate\n---\npackage {{options.package}}.aggregate;\n\nimport org.axonframework.commandhandling.CommandHandler;\nimport org.axonframework.eventsourcing.EventSourcingHandler;\nimport org.axonframework.modelling.command.AggregateIdentifier;\nimport static org.axonframework.modelling.command.AggregateLifecycle.*;\nimport org.axonframework.spring.stereotype.Aggregate;\n\nimport org.springframework.beans.BeanUtils;\nimport java.util.List;\nimport java.util.UUID;\n\nimport lombok.Data;\nimport lombok.ToString;\n\n{{#checkDateType aggregateRoot.fieldDescriptors}} {{/checkDateType}}\n{{#checkBigDecimal aggregateRoot.fieldDescriptors}} {{/checkBigDecimal}}\n\nimport {{options.package}}.command.*;\nimport {{options.package}}.event.*;\nimport {{options.package}}.query.*;</code></pre>\n<p>먼저, 이벤트스토밍 스티커의 유형을 선언해야 합니다(Aggregate, Command, Policy 등).</p>\n<p>그런 다음 {{ Mustache 엔진 }}을 사용하여 파일의 이름과 경로를 설정해야 합니다.</p>\n<p>이 때 패키지명도 선언되어야 하며, 각 파일에 필요한 모든 라이브러리를 가져와야 합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">@Aggregate\n@Data\n@ToString\npublic class {{namePascalCase}}Aggregate {\n\n    {{#aggregateRoot.fieldDescriptors}}\n    {{#isKey}}\n    @AggregateIdentifier\n    {{/isKey}}\n    private {{{className}}} {{nameCamelCase}};\n    {{/aggregateRoot.fieldDescriptors}}\n\n    public {{namePascalCase}}Aggregate(){}\n\n    {{#commands}}\n    @CommandHandler\n    {{#if (isRepositoryPost this)}}\n    public {{../namePascalCase}}Aggregate({{namePascalCase}}Command command){\n    {{else}}\n    public void handle({{namePascalCase}}Command command){\n    {{/if}}\n\n        {{#triggerByCommand}}\n        {{eventValue.namePascalCase}}Event event = new {{eventValue.namePascalCase}}Event();\n        BeanUtils.copyProperties(command, event);     \n\n        {{#if (isRepositoryPost ../this)}}\n        //TODO: check key generation is properly done\n        if(event.get{{@root.aggregateRoot.keyFieldDescriptor.namePascalCase}}()==null)\n            event.set{{@root.aggregateRoot.keyFieldDescriptor.namePascalCase}}(createUUID());\n        {{/if}}\n\n        apply(event);\n\n        {{#relationCommandInfo}}\n        {{#commandValue}}\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        {{options.package}}.external.{{aggregate.namePascalCase}} {{aggregate.nameCamelCase}} = new {{options.package}}.external.{{aggregate.namePascalCase}}();\n        // mappings goes here\n        {{relationCommandInfo.boundedContext.namePascalCase}}Application.applicationContext.getBean({{options.package}}.external.{{aggregate.namePascalCase}}Service.class)\n        .{{nameCamelCase}}({{aggregate.nameCamelCase}});\n        {{/commandValue}}\n        {{/relationCommandInfo}}\n        {{/triggerByCommand}}\n    }\n\n    {{/commands}}</code></pre>\n<p>첫 번째 주석인 @Aggregate는 Aggregate 스티커를 변환하는 템플릿임을 나타내며, @Data 및 @ToString은 모델로부터 데이터를 받아와 문자열 형태로 변환합니다.</p>\n<p>다음으로 클래스 선언이 나옵니다. 템플릿은 Aggregate 스티커의 이름을 기반으로 클래스 이름을 생성하고 그 안에 저장된 속성을 가져옵니다.</p>\n<p>{{#aggregateRoot.fieldDescriptors}}는 Aggregate에서 속성을 가져오는 역할을 합니다. {{#isKey}}는 속성의 키 값을 변환하며, @AggregateIdentifier 주석에 의해 속성의 전체 그룹이 소스 코드의 생성자로 변환됩니다.</p>\n<p>그런 다음 @CommandHandler가 나옵니다. 이것은 커맨드 스티커에서 정보를 수집하여 도메인 이벤트를 요청하는 메서드로 변환합니다.</p>\n<p>각 커맨드는 메서드로 변환되며, 서비스를 실행하는 트리거로 작동합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">//&lt;&lt;&lt; Etc / ID Generation\n    private String createUUID() {\n        return UUID.randomUUID().toString();\n    }\n//&gt;&gt;&gt; Etc / ID Generation\n\n    {{#policies}}\n\n//&lt;&lt;&lt; Clean Arch / Port Method\n    \n    @CommandHandler\n    public void handle({{namePascalCase}}Command command){\n        {{#triggerByCommand}}\n        {{eventValue.namePascalCase}}Event event = new {{eventValue.namePascalCase}}Event();\n        BeanUtils.copyProperties(this, event);     \n        apply(event);\n\n        {{#relationCommandInfo}}\n        {{#commandValue}}\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        {{options.package}}.external.{{aggregate.namePascalCase}} {{aggregate.nameCamelCase}} = new {{options.package}}.external.{{aggregate.namePascalCase}}();\n        // mappings goes here\n        {{relationCommandInfo.boundedContext.namePascalCase}}Application.applicationContext.getBean({{options.package}}.external.{{aggregate.namePascalCase}}Service.class)\n        .{{nameCamelCase}}({{aggregate.nameCamelCase}});\n        {{/commandValue}}\n        {{/relationCommandInfo}}\n        {{/triggerByCommand}}\n    }\n//&gt;&gt;&gt; Clean Arch / Port Method\n\n    {{/policies}}</code></pre>\n<p>각 Aggregate의 키 값에 대해 템플릿은 무작위로 UUID를 생성하여 문자열 형태로 변환합니다.</p>\n<p>또는 id 생성에 대한 정책으로 선언된 규칙이 있으면, 템플릿은 해당 정보를 가져와 핸들러에서 사용할 id를 생성합니다.</p>\n<p>@CommandHandler 주석은 커맨드 스티커를 호출하고 액션을 이벤트로 변환하여 서비스를 실행합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">//&lt;&lt;&lt; EDA / Event Sourcing\n\n    {{#events}}\n    \n    @EventSourcingHandler\n    public void on({{namePascalCase}}Event event) {\n\n        {{#isCreationEvent}}\n        BeanUtils.copyProperties(event, this);\n        {{/isCreationEvent}}\n\n        //TODO: business logic here\n\n    }\n\n    {{/events}}\n//&gt;&gt;&gt; EDA / Event Sourcing</code></pre>\n<p>마지막 단계는 @EventSourcingHandler로 시작합니다.</p>\n<p>이것은 이벤트스토밍 모델에서 도메인 이벤트를 처리하며, 각 이벤트에 대해 하나의 메서드를 가져옵니다.</p>\n<p>@EventSourcingHandler 내에서 애플리케이션에 포함시키고자 하는 도메인 이벤트에 대한 비즈니스 로직을 추가할 수 있습니다.</p>\n<h3 id=\"템플릿-파일-발행-및-적용\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%8C%8C%EC%9D%BC-%EB%B0%9C%ED%96%89-%EB%B0%8F-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>템플릿 파일 발행 및 적용</h3>\n<p>커스텀 템플릿 파일 디자인이 완료되면, 이벤트스토밍 모델을 소스 코드로 변환하기 위해 해당 파일을 자신의 GitHub 저장소에 업로드하고 활용할 수 있습니다.</p>\n<p>보드에서 CODE 버튼을 클릭하고 템플릿 변경 페이지를 엽니다.</p>\n<blockquote>\n<p>템플릿 변경 페이지\n<img src=\"https://github.com/kykim97/google-drive/assets/113568664/938f205e-23c4-4d36-9613-4544acac9fe2\" alt=\"스크린샷 2023-06-08 오후 2 08 30\"></p>\n</blockquote>\n<p>Custom Template을 선택하고 이전에 발행한 템플릿 파일의 GitHub 저장소 URL을 입력합니다.</p>\n<blockquote>\n<p>URL 입력\n<img src=\"https://github.com/kykim97/google-drive/assets/113568664/b9561a53-e536-411f-862a-2e1ee81dceef\" alt=\"스크린샷 2023-06-08 오후 2 09 22\"></p>\n</blockquote>\n<p>적용한 템플릿 파일로 변환된 결과물을 확인합니다.</p>\n<blockquote>\n<p>결과물\n<img src=\"https://github.com/kk-young/google-drive/assets/92732781/41ea7181-2caa-47aa-aff2-b623bfd53b66\" alt=\"스크린샷 2023-06-08 오후 4 35 24\"></p>\n</blockquote>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"커스텀 템플릿 디자인","anchor":"#커스텀-템플릿-디자인"},{"depth":2,"value":"템플릿 파일 생성","anchor":"#템플릿-파일-생성"},{"depth":3,"value":"템플릿 파일 발행 및 적용","anchor":"#템플릿-파일-발행-및-적용"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/google-drive-examples/","title":"구글 드라이브 예제"}},{"node":{"path":"/custom-template/designing-template/","title":"커스텀 템플릿 디자인"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 튜토리얼"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트 스토밍"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/custom-template/custom-template/","title":"커스텀 템플릿 만들기"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template 만들기 "}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template 만들기"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/contact/question/","title":"CONTACT"}}]}},"context":{}}