{"hash":"97816ef43d65a9726b911ff76cd96eb6e4c1c61d","data":{"markdownPage":{"id":"15bf504980d5446888b114aa54017ac0","title":"커스텀 템플릿 만들기","description":"","path":"/custom-template/designing-template/","timeToRead":10,"content":"<h1 id=\"커스텀-템플릿-만들기\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀 템플릿 만들기</h1>\n<h2 id=\"템플릿-파일-생성\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>템플릿 파일 생성</h2>\n<p>이벤트스토밍 모델을 실제 소스 코드로 변환하기 위한 템플릿 파일 생성 방법입니다.</p>\n<p>다음 예시는 Spring-boot 템플릿에서 AggregateRoot.java 파일의 소스 코드입니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">.forEach: Aggregate\nfileName: {{namePascalCase}}.java\n---\npackage {{options.package}}.domain;\n\nimport java.time.LocalDate;\nimport java.util.Date;\nimport java.util.List;\nimport javax.persistence.*;\nimport lombok.Data;</code></pre>\n<h3 id=\"기본-속성-추가\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%86%8D%EC%84%B1-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기본 속성 추가</h3>\n<pre class=\"language-text\"><code class=\"language-text\">.forEach: Aggregate\nfileName: {{namePascalCase}}.java\n---</code></pre>\n<p>먼저, 이벤트스토밍 스티커의 유형을 .forEach에 선언합니다(Aggregate, Command, Policy 등).</p>\n<p>이후 fileName에 스티커별 생성될 파일의 이름을 Mustache 구문 내부{{ }}에 변수명에 맞게 선언합니다.</p>\n<h3 id=\"범위-밖에서-상위-속성을-추가\"><a href=\"#%EB%B2%94%EC%9C%84-%EB%B0%96%EC%97%90%EC%84%9C-%EC%83%81%EC%9C%84-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>범위 밖에서 상위 속성을 추가</h3>\n<p>특정 스티커 기준 상위 속성을 추가할 경우 상위 속성으로 이동하겠다는 의미의 '../'를 Mustache 구문에 추가하여 사용합니다.</p>\n<p>예시로 Aggregate를 기준으로 상위 속성인 BoundedContext를 추가할 경우에는 다음과 같이 작성합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\"> {{../boundedContext}}</code></pre>\n<h3 id=\"속성을-평가하여-처리-if-equals\"><a href=\"#%EC%86%8D%EC%84%B1%EC%9D%84-%ED%8F%89%EA%B0%80%ED%95%98%EC%97%AC-%EC%B2%98%EB%A6%AC-if-equals\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>속성을 평가하여 처리 (if, Equals)</h3>\n<h3 id=\"반복문-조건문\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>반복문 조건문</h3>\n<h4 id=\"반복문조건문\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>#반복문/조건문</h4>\n<h4 id=\"each\"><a href=\"#each\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>each</h4>\n<h4 id=\"if-else-\"><a href=\"#if-else-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>if ~else ~</h4>\n<p>Mustache 구문 내부에 조건문 if와 else를 사용하여 조건에 맞는 값을 반환할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#if 조건 값}}\n    true일 경우 내용 반환\n{{/if}}</code></pre>\n<p>이 경우 위의 조건 값의 속성이 true인 경우 혹은 function 블록의 method에 선언된 내용이 들어올 경우 해당 method의 return값이 true일 경우, 해당 mustache 구문에 감싸진 코드가 동작합니다.</p>\n<p>반대로 결과값이 false일 경우에도 mustache 구문이 동작하게 하고 싶다면 else를 사용할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#if 조건 값}}\n    true일 경우 내용 반환\n{{else}}\n    false일 경우 내용 반환\n{{/if}}</code></pre>\n<h4 id=\"\">^</h4>\n<h4 id=\"unless\"><a href=\"#unless\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>unless</h4>\n<h4 id=\"object-iteration\"><a href=\"#object-iteration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object iteration</h4>\n<h3 id=\"속성-내-값을-치환\"><a href=\"#%EC%86%8D%EC%84%B1-%EB%82%B4-%EA%B0%92%EC%9D%84-%EC%B9%98%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>속성 내 값을 치환</h3>\n<h4 id=\"jpath\"><a href=\"#jpath\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>jpath</h4>\n<h4 id=\"네이밍-컨벤션\"><a href=\"#%EB%84%A4%EC%9D%B4%EB%B0%8D-%EC%BB%A8%EB%B2%A4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>네이밍 컨벤션</h4>\n<p>mustache 구문 내부에 변수명을 네이밍 컨벤션으로 넣으면 네이밍 컨벤션에 따른 결과값을 반환할 수 있습니다.</p>\n<p>예시) Aggregate 스티커의 이름을 'CustomTemplate'으로 정한 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{name}} =&gt; CustomTemplate\n{{nameCamelCase}} =&gt; customTemplate\n{{namePascalCase}} =&gt; CustomTemplate</code></pre>\n<h3 id=\"helper\"><a href=\"#helper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Helper</h3>\n<h4 id=\"handlebars-생성\"><a href=\"#handlebars-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handlebars 생성</h4>\n<p>특정 조건에만 해당되는 결과값을 반환하기 위해서는 function에 Handlebars 기능을 이용할 수 있습니다.</p>\n<p>먼저 script 블록 하단에 function 블록을 생성 합니다.</p>\n<p>이후, 특정 조건에 동작할 Handlebars를 작성합니다. Handlebars는 JavaScript 템플릿 엔진으로 데이터를 템플릿에 동적으로 삽입할 때 사용합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;/scirpt&gt;\n&lt;function&gt;\nwindow.$HandleBars.registerHelper(&#39;{Handlebars 이름}&#39;, function ({parameter값}){\n    실행할 코드\n}\n&lt;/function&gt;</code></pre>\n<p>Handlebars가 완성되면 script 블록 내부에 Handlebars 이름과 parameter로 보낼 값을 mustache 구문에 작성합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;script&gt;\n{{#Handlebars 이름 parameter로 보낼 데이터}}\n{{/Handlebars 이름}}\n&lt;/script&gt;</code></pre>\n<p>예시) Date type의 필요한 import문  생성.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;script&gt;\n{{#checkDateType aggregateRoot.fieldDescriptors}}\n{{/checkDateType}}\n&lt;/script&gt;\n&lt;function&gt;\nwindow.$HandleBars.registerHelper(&#39;checkDateType&#39;, function (fieldDescriptors) {\n    for(var i = 0; i &lt; fieldDescriptors.length; i ++ ){\n        if(fieldDescriptors[i] &amp;&amp; fieldDescriptors[i].className == &#39;Date&#39;){\n            return &quot;import java.util.Date;&quot;\n        }\n    }\n});\n&lt;/function&gt;</code></pre>\n<p>이 경우 aggregateRoot.fieldDescriptors의 className이 Date일 경우 </p>\n<p>결과값에 \"import java.util.Date;\"가 반환됩니다.</p>\n<h4 id=\"globar-helper\"><a href=\"#globar-helper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Globar Helper</h4>\n<p>Globar helper란 Template에서 스티커에 관계없이 공통적으로 사용할 수 있는 handlebars를 의미합니다.</p>\n<p>현재 Msa-EZ내에 정의되어있는 Globar helper에 대하여 사용방법과 예시를 설명하겠습니다.</p>\n<p>1) ifNotNull</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;ifNotNull&#39;, function (displayName, name) {\n    if(displayName){\n        return displayName;\n    }else{\n        return name;\n    }\n})</code></pre>\n<p>ifNotNull은 스티커의 name과 displayName을 구분하여 결과값을 반환합니다.</p>\n<p>예시) aggregates에 User와 UserInfo가 존재하고 User의 경우 displayName이 사용자로 설정되어있지만 UserInfo의 경우 displayName이 존재하지 않는 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#aggregates}}\n    {\n        &quot;{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}&quot;,\n    },\n{{/aggregates}}\n\n=&gt; 사용자 UserInfo</code></pre>\n<p>2) checkVo</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;checkVO&#39;, function (className, options) {\n    if(className.endsWith(&quot;Address&quot;) || className.endsWith(&quot;Photo&quot;) || className.endsWith(&quot;User&quot;) || className.endsWith(&quot;Email&quot;) \n            || className.endsWith(&quot;Payment&quot;) || className.endsWith(&quot;Money&quot;) || className.endsWith(&quot;Weather&quot;) || className.endsWith(&quot;Rating&quot;) \n            || className.endsWith(&quot;Likes&quot;)|| className.endsWith(&quot;Tags&quot;)|| className.endsWith(&quot;Comment&quot;) ){\n        return options.fn(this);\n    }\n})</code></pre>\n<p>checkVo는 parameter로 받아온 className의 문자열이 Vo로 지정된 문자열과 일치하는경우 해당 블록을 실행합니다.</p>\n<p>예시) className이 Address인 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#checkVO className}}\n    &lt;{{className}} offline label=&quot;{{namePascalCase}}&quot; v-model=&quot;value.{{nameCamelCase}}&quot; :editMode=&quot;editMode&quot; @change=&quot;change&quot;/&gt;\n{{/checkVO}}\n\n=&gt; &lt;Address offline label=&quot;Address&quot; v-model=&quot;value.address&quot; :editMode=&quot;editMode&quot; @change=&quot;change&quot;/&gt;</code></pre>\n<p>2) checkEntityMember</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;checkEntityMember&#39;, function (className, options) {\n    if(!(className.endsWith(&quot;Address&quot;) || className.endsWith(&quot;Photo&quot;) || className.endsWith(&quot;User&quot;) || className.endsWith(&quot;Email&quot;) \n            || className.endsWith(&quot;Payment&quot;) || className.endsWith(&quot;Money&quot;) || className.endsWith(&quot;Weather&quot;) || className.endsWith(&quot;Rating&quot;)) \n            || className.endsWith(&quot;Likes&quot;)|| className.endsWith(&quot;Tags&quot;)|| className.endsWith(&quot;Comment&quot;) &amp;&amp; className.indexOf(&quot;java.&quot;) == -1 &amp;&amp; className.indexOf(&quot;List&quot;) == -1){\n        return options.fn(this);\n    } else {\n        return options.inverse(this);\n    }\n})</code></pre>\n<p>checkEntityMember는 parameter로 받아온 className의 문자열이 지정된 문자열과 일치하지 않고 className에 'java.', 'List'가 포함되지 않는 경우 블록을 실행합니다.\n지정된 VO가 아닌 직접 만든 VO를 사용하는 경우 해당 handlebars를 이용합니다.</p>\n<p>예시) className이 Status인 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#checkEntityMember className}}\n    &lt;{{className}} offline label=&quot;{{namePascalCase}}&quot; v-model=&quot;value.{{nameCamelCase}}&quot; :editMode=&quot;editMode&quot; @change=&quot;change&quot;/&gt;\n{{/checkEntityMember}}\n\n=&gt; &lt;Status offline label=&quot;Status인&quot; v-model=&quot;value.status&quot; :editMode=&quot;editMode&quot; @change=&quot;change&quot;/&gt;</code></pre>\n<p>3) url</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&quot;url&quot;, function(str){\n    return  str ? str.toLowerCase().replaceAll(&quot; &quot;, &quot;-&quot;) : str;\n});</code></pre>\n<p>url은 parameter로 받아온 str의 값을 판별합니다. str의 값이 존재하면 소문자로 변환하고 공백에 대시(-)로 대체하여 결과값을 반환합니다.</p>\n<p>예시) name이 Custom Template일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#url name}}\n{{/url}}\n=&gt; custom-template</code></pre>\n<p>4)camelCase, pascalCase</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&quot;camelCase&quot;, function(str){\n    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) =&gt; chr.toUpperCase());\n});\n\nwindow.$HandleBars.registerHelper(&quot;pascalCase&quot;, function(str){\n    return (str.match(/[a-zA-Z0-9]+/g) || []).map(w =&gt; `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join(&#39;&#39;);\n});</code></pre>\n<p>camelCase와 pascalCase의 경우 parameter로 받은 문자열을 정규표현식에 맞게 조합하여 각 네이밍컨변션에 맞게 결과값을 반환합니다.</p>\n<p>예시) name이 CustomTemplate인 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#camelCase name}}\n{{/camelCase}}\n=&gt; customTemplate\n\n{{#pascalCase name}}\n{{/pascalCase}}\n=&gt; CustomTemplate</code></pre>\n<p>5) ifEquals</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;ifEquals&#39;, function (arg1, arg2, options) {\n    return (arg1 == arg2) ? options.fn(this) : options.inverse(this);\n});</code></pre>\n<p>ifEquals는 parameter arg1과 arg2의 값을 비교하여 동일할 경우 블록 실행합니다.</p>\n<p>예시) dataProjection이 query-for-aggregate일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#ifEquals dataProjection &quot;query-for-aggregate&quot;}}\n    &lt;!-- 내부 코드 --&gt;\n{{/ifEquals}}\n=&gt; =&gt; &lt;!-- 내부 코드 --&gt; </code></pre>\n<p>6) ifContains</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;ifContains&#39;, function (jsonPath, value, options) {\n    var evaluatedVal = window.jp.query(this, jsonPath);\n    if(evaluatedVal.length &amp;&amp; evaluatedVal.length == 1){\n        evaluatedVal = evaluatedVal[0];\n    }\n    if( evaluatedVal == value || evaluatedVal.includes(value)\n\n    ){\n        return options.fn(this)\n    }else{\n        return options.inverse(this)\n    }\n\n});</code></pre>\n<p>ifContains는 parameter jsonPath에서 특정 경로에 해당하는 값을 추출하여 value와 동일하거나 evaluatedVal값에 value가 포함되는 경우 블록을 실행합니다.</p>\n<p>예시) $.target._type에 위치한 값이 View일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#ifContains &quot;$.target._type&quot; &quot;View&quot;}}\n    &lt;!-- 내부 코드 --&gt; \n{{/ifContains}}\n=&gt; &lt;!-- 내부 코드 --&gt; </code></pre>\n<p>7) jp</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;jp&#39;, function (jsonPath, options) {\n    try{\n        var evaluatedVal = window.jp.query(this, jsonPath);\n        if(evaluatedVal){\n            return options.fn(evaluatedVal)\n        }else{\n            return options.inverse(this)\n        }\n    }catch(e){\n        return options.inverse(this)\n    }\n});</code></pre>\n<p>jp는 parameter jsonPath의 경로값을 특정 경로에 해당하는 값을 추출하여 evaluatedVal 변수에 담고 해당 변수가 존재할 경우 블록을 실행하며 evaluatedVal를 반환합니다.</p>\n<p>예시) $.target._type에 위치한 값이 View일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#jp &quot;$.target._type&quot;}}\n{{/jp}}\n=&gt; View</code></pre>\n<p>8) outgoing</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;outgoing&#39;, function (type, value, options) {\n    if(value==null)\n        value = this;\n    var evaluatedVal = window.jp.query(value, `$.outgoingRelations[?(@.target.type==&#39;${type}&#39;)]`);\n    \n    if(evaluatedVal &amp;&amp; evaluatedVal.length){\n        let result = &quot;&quot;;\n        evaluatedVal.forEach((item, index) =&gt; {\n            result += options.fn(item.target);\n        })\n        return result;\n    \n    }else{\n        return options.inverse(value)\n    }\n});</code></pre>\n<p>outgoing은 patameter type을 JSONPath를 이용하여 taget.tyoe와 일치하는 항목을 찾고 존재할 경우 블록을 실행하여 item.target을 반환합니다.</p>\n<p>즉, outgoingRelations에 해당되는 특정 스티커와 일치되는 항목이 있을 경우 블록을 실행하고 해당 스티커의 target에 해당하는 정보를 반환합니다.</p>\n<p>예시) Aggregate 스티커 UserInfo와 User가 존재하고 User에서 UserInfo로 outgoingRelations가 형성되어 있는 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#outgoing &#39;Aggregate&#39; this}}\n    {{nameCamelCase}}\n{{/outgoing}}\n=&gt; userInfo</code></pre>\n<p>9) incoming</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;incoming&#39;, function (type, value, options) {\n    var evaluatedVal = window.jp.query(value, `$.incomingRelations[?(@.source.type==&#39;${type}&#39;)]`);\n    \n    if(evaluatedVal &amp;&amp; evaluatedVal.length){\n        let result = &quot;&quot;;\n        evaluatedVal.forEach((item, index) =&gt; {\n            result += options.fn(item.source);\n        })\n        return result;\n    \n    }else{\n        return options.inverse(this)\n    }\n});</code></pre>\n<p>incoming은 outgoing과 반대로 incomingRelations에 해당되는 스티커의 정보가 일치할 경우 블록이 실행되며 source에 해당하는 정보를 반환합니다.\n예시) Aggregate 스티커 UserInfo와 User가 존재하고 UserInfo와에서 User로 incomingRelations가 형성되어 있는 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#incoming &#39;Aggregate&#39; this}}\n    {{namePascalCase}}\n{{/incoming}}\n=&gt; User</code></pre>\n<p>10)attached</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;attached&#39;, function (type, value, options) {\n    let attachedElementsInTheType\n    \n    if(value.attached)\n        attachedElementsInTheType = value.attached.filter(\n            element =&gt; (element._type.endsWith(type) || (type==&#39;ReadModel&#39; &amp;&amp; element._type.endsWith(&#39;View&#39;)))\n        )\n\n    if(attachedElementsInTheType &amp;&amp; attachedElementsInTheType.length){\n        let result = &quot;&quot;;\n        attachedElementsInTheType.forEach((item, index) =&gt; {\n            result += options.fn(item);\n        })\n\n        return result;\n    }else{\n        return options.inverse(this)\n    }\n\n});</code></pre>\n<p>attached는 특정 스티커를 기준으로 parameter로 받아오는 type과 일치한 스티커가 있을 경우 블록이 실행되며 일치한 type에 해당하는 스티커의 정보를 반환합니다.</p>\n<p>예시) Aggregate스티커 User기준 부착된 ReadModel스티커 UserQuery의 queryParameters 정보를 불러오는 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#attached &#39;View&#39; this}}\n    {{#queryParameters}}{{nameCamelCase}}{{/queryParameters}}\n    &quot;queryParameters에 name, age가 있다고 가정&quot;\n{{/attached}}\n=&gt; name age</code></pre>\n<h3 id=\"template-editor\"><a href=\"#template-editor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template Editor</h3>\n<h3 id=\"chat-gpt-generated-template\"><a href=\"#chat-gpt-generated-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chat GPT (Generated Template)</h3>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"커스텀 템플릿 만들기","anchor":"#커스텀-템플릿-만들기"},{"depth":2,"value":"템플릿 파일 생성","anchor":"#템플릿-파일-생성"},{"depth":3,"value":"기본 속성 추가","anchor":"#기본-속성-추가"},{"depth":3,"value":"범위 밖에서 상위 속성을 추가","anchor":"#범위-밖에서-상위-속성을-추가"},{"depth":3,"value":"속성을 평가하여 처리 (if, Equals)","anchor":"#속성을-평가하여-처리-if-equals"},{"depth":3,"value":"반복문 조건문","anchor":"#반복문-조건문"},{"depth":4,"value":"#반복문/조건문","anchor":"#반복문조건문"},{"depth":4,"value":"each","anchor":"#each"},{"depth":4,"value":"if ~else ~","anchor":"#if-else-"},{"depth":4,"value":"^","anchor":""},{"depth":4,"value":"unless","anchor":"#unless"},{"depth":4,"value":"Object iteration","anchor":"#object-iteration"},{"depth":3,"value":"속성 내 값을 치환","anchor":"#속성-내-값을-치환"},{"depth":4,"value":"jpath","anchor":"#jpath"},{"depth":4,"value":"네이밍 컨벤션","anchor":"#네이밍-컨벤션"},{"depth":3,"value":"Helper","anchor":"#helper"},{"depth":4,"value":"Handlebars 생성","anchor":"#handlebars-생성"},{"depth":4,"value":"Globar Helper","anchor":"#globar-helper"},{"depth":3,"value":"Template Editor","anchor":"#template-editor"},{"depth":3,"value":"Chat GPT (Generated Template)","anchor":"#chat-gpt-generated-template"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"구글 드라이브 예제"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/custom-template/designing-template/","title":"커스텀 템플릿 만들기"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/custom-template/","title":"커스텀 템플릿 객체별 속성"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}