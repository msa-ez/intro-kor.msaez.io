{"hash":"e6618711a73f5c1ffc1f3bc8e07f7728ab99dcd8","data":{"markdownPage":{"id":"6eb0b25a63644bab83659819f12872e3","title":"반복문 & 조건문","description":"","path":"/custom-template/loop-conditional-statement/","timeToRead":3,"content":"<h1 id=\"반복문--조건문\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8--%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>반복문 &#x26; 조건문</h1>\n<p>'Model Explorer'로 생성된 데이터를 확인해보면 키-값의 유형도 있지만 객체나 배열의 유형도 존재합니다. </p>\n<p>이때 객체나 배열로 생성된 데이터의 대한 정보를 가져오기 위해서 반복문을 통해 동일한 코드 블록을 여러 번 실행하면서 각각의 내부 데이터를 가져올 수 있습니다.</p>\n<h2 id=\"1--반복문\"><a href=\"#1--%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. # 반복문</h2>\n<p>{{#반복가능한객체}}{{/반복가능한객체}}로 사용하며 반복가능한 객체에는 객체나 배열을 입력할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">fieldDescriptors: \n[\n    {&#39;name&#39;: &#39;id&#39;},\n    {&#39;nameCamelCase&#39;: &#39;id&#39;},\n    {&#39;className&#39;: &#39;Long&#39;}\n    {&#39;isKey&#39;: true}\n],\n[\n    {&#39;name&#39;: &#39;userId&#39;},\n    {&#39;nameCamelCase&#39;: &#39;userId&#39;},\n    {&#39;className&#39;: &#39;String&#39;}\n    {&#39;isKey&#39;: false}\n],\n[\n    {&#39;name&#39;: &#39;productName&#39;},\n    {&#39;nameCamelCase&#39;: &#39;productName&#39;},\n    {&#39;className&#39;: &#39;String&#39;}\n    {&#39;isKey&#39;: false}\n]</code></pre>\n<p>Aggregate의 필드는 aggregateRoot.fieldDescriptors로 접근할 수 있는데 해당 데이터는 배열로 구성되어있습니다.</p>\n<p>이때 각각의 필드의 정보를 가져오기 위해서는 아래와 같이 사용할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#aggregateRoot.fieldDescriptors}}\n    private {{className}} {{nameCamelCase}};\n{{/aggregateRoot.fieldDescriptors}}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">private Long id;\n\nprivate String userId;\n\nprivate String productName;</code></pre>\n<h2 id=\"2-each-반복문\"><a href=\"#2-each-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. each 반복문</h2>\n<p>each를 통해서 반복문을 사용가능하며, {{#each 반복가능한 객체}}{{/each}}의 형태로 사용할 수 있습니다.</p>\n<p>each 반복문을 사용하여 Aggregate의 필드에 대한 정보를 아래와 같이 가져올 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#each aggregateRoot.fieldDescriptors}}\n    private {{{className}}} {{nameCamelCase}};\n{{/each}}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">private Long id;\n\nprivate String userId;\n\nprivate String productName;</code></pre>\n<h2 id=\"조건문\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>조건문</h2>\n<p>조건문은 특정 속성이나 상황에 대해 판별하여 상황에 맞는 결과값을 가져올 때 사용할 수 있습니다.</p>\n<p>일반적으로 {{#속성}}{{/속성}}를 사용할 수 있습니다.</p>\n<h2 id=\"3-참-조건문\"><a href=\"#3-%EC%B0%B8-%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 참 조건문</h2>\n<p>참 조건문은 속성의 결과값이 true인 경우에만 하단의 코드블록을 실행할 때 사용할 수 있습니다.</p>\n<p>아래는 {{#속성}}{{/속성}}을 이용하여 특정 필드에 '@Id'를 생성하는 방법입니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{namePascalCase}} {\n\n    {{#aggregateRoot.fieldDescriptors}}\n        {{#isKey}}\n        @Id\n        {{/isKey}}\n        private {{className}} {{nameCamelCase}};\n    {{/aggregateRoot.fieldDescriptors}}\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Order {\n\n    @Id\n    private Long id;\n\n    private String userId;\n\n    private String productName;\n}</code></pre>\n<p>현재 aggregateRoot.fieldDescriptors의 isKey에 대하여 id필드는 true의 값을, name필드는 \"\"의 값을 가지고 있습니다.</p>\n<p>이때, {{#isKey}}{{/isKey}}를 통해 isKey의 데이터가 ture인 id필드에만 '@Id'가 생성되도록 설정할 수 있습니다.</p>\n<h2 id=\"4-거짓-조건문\"><a href=\"#4-%EA%B1%B0%EC%A7%93-%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 거짓 조건문</h2>\n<p>{{#속성}}{{/속성}}과 반대로 특정 속성에 대하여 거짓인 경우에만 하단의 블록을 실행할 때 사용할 수 있습니다.</p>\n<p>일반적으로 {{^ 조건문}}{{/조건문}}으로 사용하며, {{#unless 조건문}}{{/unless}}를 통해서도 조건이 거짓인 경우에 대해 설정할 수 있습니다.</p>\n<p>아래는 이전 참 조건문에 {{^ 조건문}}{{/조건문}}을 더해 이중으로 조건을 걸어 필드에 어노테이션을 적용하는 방법입니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{namePascalCase}} {\n\n    {{#aggregateRoot.fieldDescriptors}}\n        {{^isVO}}\n        {{#isKey}}\n        @Id\n        {{/isKey}}\n        {{/isVO}}\n        private {{className}} {{nameCamelCase}};\n    {{/aggregateRoot.fieldDescriptors}}\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Order {\n\n    @Id\n    private Long id;\n\n    private String userId;\n\n    private String productName;\n}</code></pre>\n<p>현재 aggregateRoot.fieldDescriptors의 isVO에 대한 데이터로 id필드는 값이 존재하지 않으며, name필드는 \"\"로 나타나고 있습니다.</p>\n<p>따라서 {{^isVO}}{{/isVO}}를 통해 필드의 속성중 isVO가 false 조건에 부합하는 id, name필드를 1차로 선별한 후,</p>\n<p>{{#isKey}}{{/isKey}}를 통해 isKey가 true인 id필드를 2차로 선별하였습니다.</p>\n<p>즉, 두 조건문을 사용하여 VO필드가 아니면서 동시에 key값을 가진 필드 id에만 @Id가 생성되는 것을 확인할 수 있습니다.</p>\n<h2 id=\"5-if--else-\"><a href=\"#5-if--else-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. if ~ else ~</h2>\n<p>참 조건문과 거짓 조건문을 같이 사용하여 상황에 따라 서로 다른 결과값을 가져올 수 있습니다.</p>\n<p>{{#if 조건문}}{{else}}{{/if}}의 형태로 사용 가능하며, {{if 조건문}}에 부합될 경우 하단의 블록 코드가 실행되고,</p>\n<p>조건에 부합되지 않을 경우 {{else}} 하단의 블록 코드가 실행되며 아래와 같이 사용할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{namePascalCase}} {\n\n    {{#aggregateRoot.fieldDescriptors}}\n        {{#if isKey}}\n        @Id\n        private {{className}} {{nameCamelCase}};\n        {{else}}\n        private {{className}} {{nameCamelCase}};\n        {{/isKey}}\n    {{/aggregateRoot.fieldDescriptors}}\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Order {\n\n    @Id\n    private Long id;\n\n    private String userId;\n\n    private String productName;\n}</code></pre>\n<p>예시를 보면 {{#if isKey}}를 통해 조건에 부합한 id필드에만 '@Id'가 추가되도록 설정하였고,</p>\n<p>조건에 부합하지 않은 필드들은 {{else}}조건에 부합되어 '@Id'이 생성되지 않은 상태로 생성된 것을 확인할 수 있습니다.</p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"반복문 & 조건문","anchor":"#반복문--조건문"},{"depth":2,"value":"1. # 반복문","anchor":"#1--반복문"},{"depth":2,"value":"2. each 반복문","anchor":"#2-each-반복문"},{"depth":2,"value":"조건문","anchor":"#조건문"},{"depth":2,"value":"3. 참 조건문","anchor":"#3-참-조건문"},{"depth":2,"value":"4. 거짓 조건문","anchor":"#4-거짓-조건문"},{"depth":2,"value":"5. if ~ else ~","anchor":"#5-if--else-"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}}]}},"context":{}}