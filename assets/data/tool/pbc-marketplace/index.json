{"hash":"216a0c19a155fe8f867889f3ee0c03ba29541f2d","data":{"markdownPage":{"id":"0697c74e820676ffa97cf132bf093a9b","title":"PBC(Packaged Business Capability)","description":"","path":"/tool/pbc-marketplace/","timeToRead":1,"content":"<h1 id=\"pbcpackaged-business-capability\"><a href=\"#pbcpackaged-business-capability\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PBC(Packaged Business Capability)</h1>\n<h2 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>개요</h2>\n<p>마이크로서비스 아키텍처에서 비즈니스 기능의 재사용과 효율적인 통합은 중요한 과제입니다. 특히 자주 사용되는 비즈니스 기능을 매번 새롭게 구현하는 것은 시간과 리소스의 낭비를 초래할 수 있습니다.</p>\n<p><strong>PBC</strong>는 사전에 구현된 비즈니스 기능들을 재사용 가능한 패키지로 제공하여, 개발 생산성을 높이고 일관된 비즈니스 로직 구현을 가능하게 합니다.</p>\n<p>분석/설계 단계에서 선택된 PBC는 구현 단계에서 자동으로 코드로 변환되며, 생성된 폴더의 ReadMe 파일에서 제공하는 가이드라인을 따라 손쉽게 구현을 완료할 수 있습니다. 이를 통해 개발자는 핵심 비즈니스 로직 구현에 더 집중할 수 있으며, 검증된 기능을 재사용함으로써 개발 품질도 향상시킬 수 있습니다.</p>\n<p>특히 복잡한 알림 시스템, 사용자 리뷰 관리, 안전한 결제 처리와 같은 기능들을 PBC를 통해 빠르고 안정적으로 구현할 수 있어 개발자의 부담을 크게 줄여줍니다.</p>\n<h2 id=\"수행-방법\"><a href=\"#%EC%88%98%ED%96%89-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>수행 방법</h2>\n<p><strong>실제 적용 사례 : 차량호출 서비스에서 운행이 완료되었을 때, 요금을 토대로 결제 처리 및 영수증 조회까지 가능한 결제시스템을 PBC 기능으로 간편하게 구현할 수 있습니다.</strong></p>\n<h3 id=\"분석설계\"><a href=\"#%EB%B6%84%EC%84%9D%EC%84%A4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>분석/설계</h3>\n<img src=\"https://github.com/user-attachments/assets/ca1c696d-5966-4e0f-96e7-b01290aa9580\">\n<br>\n<img src=\"https://github.com/user-attachments/assets/37e2cf82-d288-4dc5-a15b-55eeaaab1cb8\">\n<br>\n1. 이벤트스토밍 모델 캔버스의 좌측 팔레트에서 PBC를 Drag&Drop하여 MSAEZ에서 제공하는 기존 PBC 리스트에서 원하는 기능을 선택하고 적용할 수 있습니다.\n<br>(결제시스템이 필요한 상황이니 marketplace에서 payment-system을 적용)\n<p><br><br>\n<img src=\"https://github.com/user-attachments/assets/9488fafe-6a75-4d21-82bc-e2cbffe4b28f\">\n<br>\n2. 배차 boundedContext 하단에 PaymentSystem이라는 PBC 초안이 생성되면, 빈 화면으로 나오는 PBC모델을 더블 클릭합니다.</p>\n<p><br><br>\n<img src=\"https://github.com/user-attachments/assets/afa80621-332a-4091-83a5-db6a8e6c941f\">\n<br>\n3. 옵션으로 읽기, 커맨드, 이벤트 등 사용할 기능에 대한 요소를 선택할 수 있는데, 각각의 옵션들은 이벤트스토밍에서 ReadModel, Command, Event을 뜻합니다.</p>\n<p><br><br>\n<img src=\"https://github.com/user-attachments/assets/a73d5064-99ac-42fa-9bde-a3985128ed8a\">\n<br>\n4. 옵션 창을 닫으면 선택한 옵션들에 대한 모델들이 나오는 것을 확인할 수 있고, 위와같이 기존 PaymentSystem에 생성한 모델중 선택된 스티커만 가져온 것을 확인할 수 있습니다.</p>\n<p><br><br>\n<img src=\"https://github.com/user-attachments/assets/21b45119-386c-4abe-9632-9a1106fb395c\">\n<br>\n5. 그리고 결제가 진행되었을 때 결제성공됨 Event에서 생성된 정보를 토대로 운행정보의 paymentId와 paymentStatus를 업데이트하기 위한 Pub/Sub연결을 진행합니다.</p>\n<p><br><br>\n<img src=\"https://github.com/user-attachments/assets/17a1fdce-2bd4-4162-914c-5c1c6b2b1fed\">\n<br>\n&#x3C;차량호출 서비스에 결제시스템 PBC를 적용한 전체 모델 화면></p>\n<h3 id=\"구현\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현</h3>\n<img src=\"https://github.com/user-attachments/assets/2ec2ed5b-f205-4870-9250-8e6f8690e3c1\">\n<br>\n<img src=\"https://github.com/user-attachments/assets/b9d08542-041a-4d33-97c9-288a73c45324\">\n<br>\n1. 코드뷰어를 열면 PaymentSystem이라는 폴더가 생성되고, 생성된 폴더에 있는 ReadMe파일의 instruction대로 따라하시면 구현레벨까지 생성이 됩니다. \n<p><br><br>\n<img src=\"https://github.com/user-attachments/assets/67902de5-0f50-446c-b758-f04ae6e07779\">\n<br>\n2. 구현된 UI에서 좌측 하단 결제 버튼을 클릭하면 결제 세부 페이지가 뜨고, 다시 결제를 누르면 PG사에서 제공하는 결제 UI가 나옵니다.</p>\n<p><br><br>\n<img src=\"https://github.com/user-attachments/assets/0e1daf81-7f71-405d-b30d-693a52882ddc\">\n<br>\n3. 결제 완료시 paymentId와 paymentStatus가 등록되며 영수증조회 버튼이 생성되고, 영수증 조회를 클릭한 후 조회 주문번호 입력에 paymentId를 입력 및 조회버튼 클릭시, 결제정보를 확인할 수 있습니다.</p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"PBC(Packaged Business Capability)","anchor":"#pbcpackaged-business-capability"},{"depth":2,"value":"개요","anchor":"#개요"},{"depth":2,"value":"수행 방법","anchor":"#수행-방법"},{"depth":3,"value":"분석/설계","anchor":"#분석설계"},{"depth":3,"value":"구현","anchor":"#구현"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/pbc-marketplace/","title":"PBC(Packaged Business Capability)"}},{"node":{"path":"/tool/plsql-2-java/","title":"PL/SQL to Java 자동 테스팅"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}}]}},"context":{}}