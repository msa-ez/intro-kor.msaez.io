{"hash":"499b76d592a24a070bf755a77e3b550d0fda11d9","data":{"markdownPage":{"id":"166a4da01c641639f8ec8ba30e89c13f","title":"Pub/Sub 방식의 연동 ","description":"","path":"/development/pub-sub/","timeToRead":2,"content":"<h1 id=\"pubsub-방식의-연동\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동</h1>\n<h3 id=\"이벤트-publish--subscribe\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-publish--subscribe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 Publish / Subscribe</h3>\n<ul>\n<li>마이크로 서비스간의 통신에서 이벤트 메세지를 Pub/Sub 하는 방법을 실습한다.  </li>\n<li>Order 서비스에서 OrderPlaced 이벤트를 발행하였을때 Inventory 서비스에서 OrderPlaced 이벤트를 수신하여 재고량을 변경(감소)한다.  </li>\n</ul>\n<h4 id=\"order-서비스의-이벤트-publish\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-publish\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>order 서비스의 이벤트 Publish</h4>\n<ul>\n<li>\n<p>order 마이크로 서비스를 실행한다.</p>\n<blockquote>\n<p>order 폴더를 선택 > Open In Terminal > 터미널에서 아래 커맨드를 실행한다.\n주문 서비스가 8081 포트로 실행된다.</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<ul>\n<li>\n<p>기동된 order 서비스를 호출하여 주문 1건을 요청한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=TV qty=3</code></pre>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">- GitPod에서 새 터미널을 추가한다.\n- kafka 유틸리티가 포함된 위치에 접속하기 위하여 docker 를 통하여 shell 에 진입한다:</code></pre>\n<p>cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin</p>\n<pre class=\"language-text\"><code class=\"language-text\">- kafka Consumer에서 이벤트 확인한다</code></pre>\n<p>./kafka-console-consumer --bootstrap-server localhost:9092 --topic labshoppubsub  --from-beginning</p>\n<pre class=\"language-text\"><code class=\"language-text\">#### Inventory 서비스의 이벤트 Subscribe\n- Inventory PolicyHandler.java Code 확인한다.\n- PolicyHandler.java --&gt; Inventory.java (Aggregate) 의 Port Method (decreaseStock)을 호출하게 된다.\n- decreaseStock 내에 우리가 작성해야 할 로직은 다음과 같다:</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">    repository().findById(Long.valueOf(orderPlaced.getProductId())).ifPresent(inventory-&gt;{\n        \n        inventory.setStock(inventory.getStock() - orderPlaced.getQty()); // do something\n        repository().save(inventory);\n\n\n     });\n  </code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">- inventory 서비스를 실행한다.</code></pre>\n<p>mvn spring-boot:run</p>\n<pre class=\"language-text\"><code class=\"language-text\">- inventory 서비스가 8082 포트로 기동됨을 확인한다.\n- OrderPlaced 이벤트에 반응하여 재고량이 감소되는 것을 확인한다:</code></pre>\n<p>http :8082/inventories id=1 stock=10\nhttp :8081/orders productId=1 qty=5\nhttp :8082/inventories/1</p>\n<pre class=\"language-text\"><code class=\"language-text\">결과:</code></pre>\n<p>{\n\"_links\": {\n\"inventory\": {\n\"href\": \"<a href=\"http://localhost:8082/inventories/1\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8082/inventories/1</a>\"\n},\n\"self\": {\n\"href\": \"<a href=\"http://localhost:8082/inventories/1\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8082/inventories/1</a>\"\n}\n},\n\"stock\": 5\n}</p>\n<pre class=\"language-text\"><code class=\"language-text\">### 확장미션\n- delivery Bounded Context 를 생성하고, 주문에 대하여 배송 1건을 추가하는 policy를 모델링하고 구현하시오.</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub 방식의 연동","anchor":"#pubsub-방식의-연동"},{"depth":3,"value":"이벤트 Publish / Subscribe","anchor":"#이벤트-publish--subscribe"},{"depth":4,"value":"order 서비스의 이벤트 Publish","anchor":"#order-서비스의-이벤트-publish"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/google-drive-examples/","title":"구글 드라이브 예제"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-2/","title":"커스텀 템플릿 생성 이해하기"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성 이해하기"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"12번가 쇼핑몰 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}