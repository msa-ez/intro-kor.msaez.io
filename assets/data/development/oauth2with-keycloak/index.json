{"hash":"97816ef43d65a9726b911ff76cd96eb6e4c1c61d","data":{"markdownPage":{"id":"4cf4209d2325d07d12f0b8752dd5411b","title":"JWT Token 기반 인증 인가 - Advanced","description":"","path":"/development/oauth2with-keycloak/","timeToRead":6,"content":"<h1 id=\"jwt-token-기반-인증-인가---advanced\"><a href=\"#jwt-token-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80---advanced\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token 기반 인증 인가 - Advanced</h1>\n<h2 id=\"jwt기반-인증-w-keycloak\"><a href=\"#jwt%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-w-keycloak\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT기반 인증 w/ Keycloak</h2>\n<h3 id=\"oauth2-stackholders\"><a href=\"#oauth2-stackholders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Stackholders</h3>\n<ul>\n<li>OAuth2.0 기반의 Spring Security와 Resource Owner, Client, Authorization Server, Resource Server간의 인증/인가를 실습한다.</li>\n<li>JWT기반 Access_Token을 활용한다.</li>\n<li>인증/인가 서버로 Keycloak(<a href=\"https://www.keycloak.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.keycloak.org/</a>) 서버를 활용한다.</li>\n</ul>\n<h3 id=\"keycloak-open-gitpod\"><a href=\"#keycloak-open-gitpod\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak Open Gitpod</h3>\n<ul>\n<li>우측 상단의 \"CODE\" 버튼을 눌러 \"Project IDE\"를 클릭한다.</li>\n</ul>\n<h3 id=\"keycloak-server-실행\"><a href=\"#keycloak-server-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak Server 실행</h3>\n<ul>\n<li>keycloak 폴더로 이동하여 컨테이너를 생성하고 및 Keycloak 서버를 실행한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd keycloak\ndocker-compose up -d</code></pre>\n<ul>\n<li>Keycloak이 사용하는 9090 포트가 목록에 나타난다.</li>\n</ul>\n<h4 id=\"keycloak-서버-오픈-및-접속하기\"><a href=\"#keycloak-%EC%84%9C%EB%B2%84-%EC%98%A4%ED%94%88-%EB%B0%8F-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 서버 오픈 및 접속하기</h4>\n<ul>\n<li>오른쪽 하단의 포트 목록을 눌러 keycloak이 사용하는 9090 포트를 Public으로 오픈한다. (두번째 자물쇠)\n<img src=\"https://user-images.githubusercontent.com/35618409/215235038-8e362605-75b5-4271-923d-d2c0cd3fffbf.png\" alt=\"image\"></li>\n<li>첫 번째 아이콘을 클릭하여, KeyCloak의 풀 URL을 클립보드에 복사한다.</li>\n<li>Keycloak 마지막 브라우저 아이콘을 눌러, 웹 브라우저에서 접속해 보자.</li>\n<li>Administration Console을 클릭해 설정된 관리자 정보(admin / admin)로 로그인한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190956899-9c7efca3-04ac-4f11-851c-1e199debaa02.png\" alt=\"image\"></li>\n<li>Keycloak 메인 화면이 아래와 같이 출력된다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190957013-3a6669d9-0928-498b-9529-cbac6fad8cd5.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"oauth-client-설정\"><a href=\"#oauth-client-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth Client 설정</h2>\n<h3 id=\"keycloak-설정\"><a href=\"#keycloak-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 설정</h3>\n<ul>\n<li>Master Realm에서 'Tokens' 탭을 눌러 Access Token Lifespan을 1시간으로 수정한다.</li>\n<li>수정 후, 하단의 'Save' 를 눌러 저장한다.</li>\n</ul>\n<h3 id=\"oauth-client-설정-1\"><a href=\"#oauth-client-%EC%84%A4%EC%A0%95-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth Client 설정</h3>\n<ul>\n<li>Keycloak 서버의 왼쪽메뉴에서 Clients를 눌러 12stmall 을 추가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190959198-145da6e6-f82d-412c-843c-9f5caf47c09e.png\" alt=\"image\">\n</li>\n<li>등록된 Client 설정에서 Access Type을 confidential로 설정한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190959505-5adf84bf-cda5-4cd9-ba90-e8c7d806a8dc.png\" alt=\"image\">\n</li>\n<li>아래에 있는 Valid Redirect URIs 설정에 다음과 같이 입력한다.</li>\n<li>규칙 : Gateway Endpoint URL + /login/oauth2/code/ + ClientId(12stmall)</li>\n<li>오른쪽 하단의 포트목록을 눌러 keycloak이 사용하는 9090 포트의 첫번째 URL 복사 아이콘을 클릭한다.</li>\n<li>GitPod에서는 이처럼 포트로 시작하는 도메인 정보로 노출된다. 이 9090을 게이트웨이 포트인 8088로 바꾸자.<br>\n<img src=\"https://user-images.githubusercontent.com/35618409/191009706-1033fa72-194b-4806-b9e7-33cffcffcf42.png\" alt=\"image\"></li>\n<li>Valid Redirect URIs 정보는 이후 Gateway에도 추가한다.</li>\n<li>저장 후, Credentials 탭을 확인하면 Secret(비밀번호)이 확인되는데 이는 이후 Gateway에도 추가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190960454-9348d122-30d3-49b0-b63d-6389107a305e.png\" alt=\"image\">\n</li>\n</ul>\n<h3 id=\"gateway-client-설정\"><a href=\"#gateway-client-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway Client 설정</h3>\n<ul>\n<li>Keycloak Client설정에 필요한 아래 템플릿 환경정보를 설정한다.</li>\n<li>Gateway > applicaion.yml 8라인에 KeyCloak SSO 서버의 엔드포인트를 설정한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">keycloak-client:\n  server-url: https://9090-acmexii-labshopoauthkey-sgn5ady40al.ws-us94.gitpod.io\n  realm: master</code></pre>\n<blockquote>\n<p>server-url 값의 맨뒤에 / 가 없도록 주의한다.</p>\n</blockquote>\n<ul>\n<li>Spring OAuth2 Security 설정을 마무리한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  security:\n    oauth2:\n      client:\n        provider:\n          keycloak:\n            issuer-uri: ${keycloak-client.server-url}/realms/${keycloak-client.realm}\n            user-name-attribute: preferred_username\n        registration:\n          keycloak:\n            client-id: &quot;&lt;client-id&gt;&quot;\n            client-secret: \n            redirect-uri: &quot;gateway-path/login/oauth2/code/client-name&quot;\n            authorization-grant-type: authorization_code\n            scope: openid\n      resourceserver:\n        jwt:\n          jwk-set-uri: ${keycloak-client.server-url}/realms/${keycloak-client.realm}/protocol/openid-connect/certs</code></pre>\n<blockquote>\n<p>51라인에 OAuth Client value인 12stmall 입력\n52라인에 KeyCloakd에 생성된 client-secret 입력\n53라인에 KeyCloakd에 설정한 redirect-uri 입력 </p>\n</blockquote>\n<h3 id=\"test-user-생성\"><a href=\"#test-user-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test User 생성</h3>\n<ul>\n<li>Keycloak 서버의 왼쪽 메뉴에서 Manage > Users를 눌러 사용자를 등록한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190961205-3c69d45e-2705-4ba2-af18-edbff2f57bf4.png\" alt=\"image\"></li>\n<li>user@naver.com 으로 저장한다.</li>\n<li>등록한 사용자의 Credentials 탭에서 비밀번호를 설정하고, Temporary를 OFF로 한 다음 설정한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190961449-1acc3c93-f448-42be-8b6e-dd6f4c99ac20.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>동일한 방식으로 admin@naver.com도 생성해 두자.</li>\n</ul>\n<h3 id=\"keycloak-sso-test\"><a href=\"#keycloak-sso-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak SSO Test</h3>\n<ul>\n<li>Gateway와 마이크로서비스를  재시작한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>실행된 Gateway 서비스도 외부에서 접속이 가능하도록 GitPod에서 8088 Port를 오픈한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190962087-a82b9e08-0cde-4d28-8e10-05cd89c938ea.png\" alt=\"image\"></li>\n<li>마이크로서비스를 시작한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>다음의 오류 발생시, 새 터미널에서 kafka를 시작한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Broker may not be available.\n2022-09-19 06:43:53.548  WARN [monolith,,,] 5204 --- [| adminclient-2] org.apache.kafka.clients.NetworkClient   : [AdminClient clientId=adminclient-2] Connection to node -1 (localhost/127.0.0.1:9092) could not be established. Broker may not be available.</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose up -d</code></pre>\n<h2 id=\"token-based-authentication-테스트\"><a href=\"#token-based-authentication-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Token based Authentication 테스트</h2>\n<ul>\n<li>크롬의 Secret 창 또는 다른 브라우저(Edge, 네이버웨일)에서 Gateway를 경유하는 Order서비스에 접속해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders\n(Gateway URL need to be modified)</code></pre>\n<ul>\n<li>비인가된 Resource 접근으로 Keycloak SSO 로그인 창이 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/190966067-a39781e6-87bc-47e6-9688-eea7f7f7cd86.png\" alt=\"image\"></li>\n<li>관리콘솔에서 등록한 사용자(user@naver.com / 1)로 인증한다.</li>\n<li>인증 성공 후, 주문서비스의 응답이 정상적으로 출력된다.</li>\n</ul>\n<h2 id=\"token-based-authorization-테스트\"><a href=\"#token-based-authorization-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Token based Authorization 테스트</h2>\n<ul>\n<li>특정 API를 권한을 가진 사용자만 접근할 수 있도록 권한(CUSTOMER, ADMIN)을 생성한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/236124984-ce3f8568-bded-4bf8-b6cd-27baa11f0452.png\" alt=\"image\"></li>\n<li>생성된 사용자에 각각 Role을 매핑한다.</li>\n<li>User > admin@naver.com를 선택하고, Role Mappings를 클릭한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/236125504-a42fb63f-8c95-450c-b275-036e815a0630.png\" alt=\"image\"></li>\n<li>Realm Roles에 있는 ADMIN 권한을 Assign 한다.</li>\n<li>마찬가지 방법으로 user@naver.com 사용자에게 CUSTOMER 권한을 Assign 한다.</li>\n</ul>\n<h3 id=\"order-resouces-권한-확인\"><a href=\"#order-resouces-%EA%B6%8C%ED%95%9C-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order Resouces 권한 확인</h3>\n<ul>\n<li>브라우저에서 주문 리소스에 user@naver.com 사용자로 접속해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders/placeOrder</code></pre>\n<ul>\n<li>이어서, 주문관리 리소스에 접속해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders/manageOrder</code></pre>\n<p>user@naver.com의 권한으로는 접근이 불가능하여 정제되지 않은 403 오류가 리턴된다.\n<img src=\"https://user-images.githubusercontent.com/35618409/236128025-33798965-23ae-4922-87a0-32435b0a2597.png\" alt=\"image\"></p>\n<h3 id=\"사용자-jwt-token-확인\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-jwt-token-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용자 JWT Token 확인</h3>\n<ul>\n<li>다음 URL로 접속하여 사용자 토큰 정보를 확인하고 전체 토큰값을 복사한다. (아래 URL에서 내 Gateway 정보로 수정한다.)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/test/token</code></pre>\n<ul>\n<li><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jwt.io/</a> 에 접속후 나타나는 Encoded Token에 복사한 토큰을 붙여넣는다.\n<img src=\"https://user-images.githubusercontent.com/35618409/236128936-454e2550-8c74-4dd2-b31f-39014ab856da.png\" alt=\"image\"></li>\n<li>Decoded Token의 Payload에서 User Claim의 Role확인이 가능하다.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"JWT Token 기반 인증 인가 - Advanced","anchor":"#jwt-token-기반-인증-인가---advanced"},{"depth":2,"value":"JWT기반 인증 w/ Keycloak","anchor":"#jwt기반-인증-w-keycloak"},{"depth":3,"value":"OAuth2 Stackholders","anchor":"#oauth2-stackholders"},{"depth":3,"value":"Keycloak Open Gitpod","anchor":"#keycloak-open-gitpod"},{"depth":3,"value":"Keycloak Server 실행","anchor":"#keycloak-server-실행"},{"depth":4,"value":"Keycloak 서버 오픈 및 접속하기","anchor":"#keycloak-서버-오픈-및-접속하기"},{"depth":2,"value":"OAuth Client 설정","anchor":"#oauth-client-설정"},{"depth":3,"value":"Keycloak 설정","anchor":"#keycloak-설정"},{"depth":3,"value":"OAuth Client 설정","anchor":"#oauth-client-설정-1"},{"depth":3,"value":"Gateway Client 설정","anchor":"#gateway-client-설정"},{"depth":3,"value":"Test User 생성","anchor":"#test-user-생성"},{"depth":3,"value":"Keycloak SSO Test","anchor":"#keycloak-sso-test"},{"depth":2,"value":"Token based Authentication 테스트","anchor":"#token-based-authentication-테스트"},{"depth":2,"value":"Token based Authorization 테스트","anchor":"#token-based-authorization-테스트"},{"depth":3,"value":"Order Resouces 권한 확인","anchor":"#order-resouces-권한-확인"},{"depth":3,"value":"사용자 JWT Token 확인","anchor":"#사용자-jwt-token-확인"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"구글 드라이브 예제"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/custom-template/designing-template/","title":"커스텀 템플릿 만들기"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/custom-template/","title":"커스텀 템플릿 객체별 속성"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}