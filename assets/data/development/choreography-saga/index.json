{"hash":"499b76d592a24a070bf755a77e3b550d0fda11d9","data":{"markdownPage":{"id":"f6cee4eb7a576512959970274e4db3b7","title":"Choreography Saga","description":"","path":"/development/choreography-saga/","timeToRead":4,"content":"<h1 id=\"choreography-saga\"><a href=\"#choreography-saga\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Choreography Saga</h1>\n<h2 id=\"axon-saga-labs\"><a href=\"#axon-saga-labs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axon Saga Labs</h2>\n<p>12st Mall에 Axon Framework 템플릿으로 EDA 통신을 적용해 본다.\n기본적으로 생성된 템플릿 코드에 Biz 로직을 추가해 주문 프로세스가 동작하도록 코드를 완성해 본다.</p>\n<ul>\n<li>Axon은 Event Sourcing 사상으로 매번 Replay를 통해 데이터 상태를 주입한다.</li>\n<li>Axon Server 자체로 Event Store 기능을 수행하며, Offset은 각 서비스들이 자체 관리한다.</li>\n</ul>\n<h3 id=\"gitpod-start\"><a href=\"#gitpod-start\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitPod Start</h3>\n<ul>\n<li>Code > Project IDE를 눌러 모델코드를 GitPod 환경에서 로딩한다.</li>\n</ul>\n<h3 id=\"axon-server\"><a href=\"#axon-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axon Server</h3>\n<h4 id=\"infra--docker-composeyml\"><a href=\"#infra--docker-composeyml\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>infra > docker-compose.yml</h4>\n<ul>\n<li>Axon Server는 대시보드를 위한 8024, 메시지 gRPC를 위한 8124 포트를 사용한다.</li>\n<li>각 서비스들의 Offset Token 관리를 위한 Token Store(MySQL)가 Lab 실행시 생성된다.</li>\n</ul>\n<h2 id=\"order-service\"><a href=\"#order-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order Service</h2>\n<ul>\n<li>기본적으로 생성된 모델기반 코드에 Biz Logic을 추가해 서비스 코드를 완성한다.</li>\n</ul>\n<h4 id=\"orderaggregate\"><a href=\"#orderaggregate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OrderAggregate</h4>\n<ul>\n<li>api 패키지에 Command와 Query를 위한 Controller가 위치한다.</li>\n<li>aggregate 패키지에 있는 OrderAggregate.java에서 CommandGateway를 통해 실행될 Command와 EventSourcingHandler가 확인된다.</li>\n<li>각 EventSourcingHandler에 Command에 따른 Biz Logic(Domain State Changing) 코드를 삽입해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 61 line, When order placed.\n        setStatus(&quot;OrderPlaced&quot;);\n\n# 67 line, When order completed.\n        setStatus(&quot;OrderCompleted&quot;);       </code></pre>\n<ul>\n<li>이로써, 커맨드에 따른 상태변화 정보가 Event Store에 저장된다.</li>\n</ul>\n<h4 id=\"policyhandler\"><a href=\"#policyhandler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PolicyHandler</h4>\n<ul>\n<li>policy 패키지 PolicyHandler.java에 배송시작에 따라 주문 완료처리 코드를 삽입한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 34 line, Insert following ACL Code. \n        command.setOrderId(deliveryStarted.getOrderId());  </code></pre>\n<h4 id=\"cqrs-handler\"><a href=\"#cqrs-handler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CQRS Handler</h4>\n<ul>\n<li>query 패키지에 있는 CQRS 구현코드를 확인한다.</li>\n<li>@EventHandler에서 Query Model을 구현하며, @QueryHandler에서 이를 조회한다.</li>\n</ul>\n<h2 id=\"delivery-service\"><a href=\"#delivery-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Delivery Service</h2>\n<ul>\n<li>배송서비스도 주문에 따른 (1)배송프로세스 시작 로직과 (2)배송 상태정보 변경 로직을 삽입해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (1) PolicyHandler.java, Line 34에 아래 코드를 추가\n        command.setUserId(orderPlaced.getUserId());\n        command.setAddress(&quot;SEOUL AMSADONG&quot;);\n        command.setOrderId(orderPlaced.getOrderId());\n        command.setProductId(orderPlaced.getProductId());\n        command.setQty(orderPlaced.getQty());\n        // command.setStatus(&quot;DeliveryStarted&quot;);  EventSourcingHandler에서 Status 설정</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\"># (2) DeliveryAggregate.java, Line 54에 아래 코드를 추가\n\t\tsetStatus(&quot;DeliveryStarted&quot;);</code></pre>\n<h2 id=\"product-service\"><a href=\"#product-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Product Service</h2>\n<ul>\n<li>상품서비스도 주문에 따른 (1)상품재고 차감 로직과 (2) 상품 상태정보 변경 로직을 삽입해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (1) PolicyHandler.java, Line 34에 아래 코드를 추가\n        command.setProductId(orderPlaced.getProductId());\n        command.setStock(orderPlaced.getQty());</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\"># (2) ProductAggregate.java, Line 57에 아래 코드를 추가\n\t\tsetStock(getStock() - event.getStock());</code></pre>\n<h2 id=\"12st-mall-테스트\"><a href=\"#12st-mall-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall 테스트</h2>\n<ul>\n<li>Rest API를 활용해 생성된 Axon Saga 기반 몰을 테스트 한다.</li>\n<li>먼저 Common API를 빌드한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd common-api\nmvn clean install</code></pre>\n<ul>\n<li>각 마이크로 서비스를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># new terminal\ncd order\nmvn clean spring-boot:run\n\n# new terminal\ncd product\nmvn clean spring-boot:run\n\n# new terminal\ncd delivery\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>상품서비스(:8082)에 테스트용 상품을 등록한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># new terminal\nhttp POST :8082/products productName=TV stock=100</code></pre>\n<ul>\n<li>등록된 상품 Id를 복사해 둔다.\n<img src=\"https://user-images.githubusercontent.com/35618409/229345799-6a86743c-d3b1-43b7-9a94-91c4e50cfd9b.png\" alt=\"image\"></li>\n<li>복사한 상품 Id로 10개의 TV를 구매하는 주문을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders productId=[상품 Id] productName=TV qty=10 userId=1001</code></pre>\n<ul>\n<li>생성된 주문 Id를 복사해 둔다.\n<img src=\"https://user-images.githubusercontent.com/35618409/229346264-89d2c227-5dc8-454d-acb0-1c24bc0da63d.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"12st-mall-테스트-검증\"><a href=\"#12st-mall-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B2%80%EC%A6%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall 테스트 검증</h3>\n<h4 id=\"주문-서비스\"><a href=\"#%EC%A3%BC%EB%AC%B8-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문 서비스</h4>\n<ul>\n<li>주문 Id로 조회 했을 때, status가 'OrderCompleted' 로 확인된다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET http :8081/orders/[주문 Id]</code></pre>\n<h4 id=\"상품-서비스\"><a href=\"#%EC%83%81%ED%92%88-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상품 서비스</h4>\n<ul>\n<li>상품 Id로 조회했을 때, 재고 수량이 90개로 확인된다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET :8082/products/[상품 Id]</code></pre>\n<h4 id=\"주문-서비스-event-이력-조회\"><a href=\"#%EC%A3%BC%EB%AC%B8-%EC%84%9C%EB%B9%84%EC%8A%A4-event-%EC%9D%B4%EB%A0%A5-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문 서비스 Event 이력 조회</h4>\n<pre class=\"language-text\"><code class=\"language-text\">http GET http :8081/orders/[주문 Id]/events</code></pre>\n<h4 id=\"배송-서비스\"><a href=\"#%EB%B0%B0%EC%86%A1-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배송 서비스</h4>\n<pre class=\"language-text\"><code class=\"language-text\">http GET :8083/deliveries</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Choreography Saga","anchor":"#choreography-saga"},{"depth":2,"value":"Axon Saga Labs","anchor":"#axon-saga-labs"},{"depth":3,"value":"GitPod Start","anchor":"#gitpod-start"},{"depth":3,"value":"Axon Server","anchor":"#axon-server"},{"depth":4,"value":"infra > docker-compose.yml","anchor":"#infra--docker-composeyml"},{"depth":2,"value":"Order Service","anchor":"#order-service"},{"depth":4,"value":"OrderAggregate","anchor":"#orderaggregate"},{"depth":4,"value":"PolicyHandler","anchor":"#policyhandler"},{"depth":4,"value":"CQRS Handler","anchor":"#cqrs-handler"},{"depth":2,"value":"Delivery Service","anchor":"#delivery-service"},{"depth":2,"value":"Product Service","anchor":"#product-service"},{"depth":2,"value":"12st Mall 테스트","anchor":"#12st-mall-테스트"},{"depth":3,"value":"12st Mall 테스트 검증","anchor":"#12st-mall-테스트-검증"},{"depth":4,"value":"주문 서비스","anchor":"#주문-서비스"},{"depth":4,"value":"상품 서비스","anchor":"#상품-서비스"},{"depth":4,"value":"주문 서비스 Event 이력 조회","anchor":"#주문-서비스-event-이력-조회"},{"depth":4,"value":"배송 서비스","anchor":"#배송-서비스"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/google-drive-examples/","title":"구글 드라이브 예제"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-2/","title":"커스텀 템플릿 생성 이해하기"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성 이해하기"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"12번가 쇼핑몰 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}