{"hash":"6b3af1beeb164aeea266c1e5c53fa3326994f6ec","data":{"markdownPage":{"id":"4de31dfa5698f32875e6accbe2d1c75b","title":"단위 마이크로 서비스의 실행 ","description":"","path":"/development/cna-start/","timeToRead":3,"content":"<h1 id=\"단위-마이크로-서비스의-실행\"><a href=\"#%EB%8B%A8%EC%9C%84-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단위 마이크로 서비스의 실행</h1>\n<h3 id=\"마이크로서비스의-실행\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마이크로서비스의 실행</h3>\n<p>스프링부트로 생성된 마이크로서비스를 컴파일하고 실행한다.</p>\n<ul>\n<li>CODE > Project IDE 를 선택하여 VS Code Online 을 실행한다.</li>\n<li>왼편의 explorer 에서 monolith 폴더를 우클릭 선택한 후 \"Open In Integrated Terminal\" 을 클릭한다.</li>\n<li>Terminal 이 해당 폴더 이하에서 열리는 것을 확인한다.</li>\n</ul>\n<h3 id=\"생성된-서비스의-기동\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성된 서비스의 기동</h3>\n<p>터미널에서 mvn 으로 마이크로서비스 실행하는 방법</p>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<br>\n<ul>\n<li>httpie tool 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">pip install httpie</code></pre>\n<br>\n<h3 id=\"서비스-테스트\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 테스트</h3>\n<ul>\n<li>1번  상품 정보 (재고량)을 등록한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/inventories id=1 stock=10</code></pre>\n<br>\n<ul>\n<li>주문 1건을 요청한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3</code></pre>\n<br>\n<ul>\n<li>재고량이 3개 감소한 것을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/inventories/1</code></pre>\n<br>\n<ul>\n<li>주문된 상품을 조회한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http GET localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders</code></pre>\n<br>\n<ul>\n<li>주문된 상품을 수정한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http PATCH localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders<span class=\"token operator\">/</span><span class=\"token number\">1</span> qty<span class=\"token operator\">=</span><span class=\"token number\">10</span></code></pre>\n<br>\n<h2 id=\"발생하는-오류-유형\"><a href=\"#%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%98%A4%EB%A5%98-%EC%9C%A0%ED%98%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>발생하는 오류 유형</h2>\n<ol>\n<li>Web server failed to start. Port 8081 was already in use.: 동일 포트넘버를 사용하는 다른 프로세스를 잡고 있는 서버가 존재. 해당 프로세스를 삭제 (터미널을 닫거나 Ctrl + C 혹은 fuser -k 포트넘버/tcp 명령)</li>\n<li>No plugin found for prefix 'spring-boot'\n: 현재 폴더에 pom.xml이 있는지 확인, 있다면, mvn spring-boot:run 명령의 오타확인</li>\n<li>ConnectionError: HTTPConnectionPool(host='localhost', port=8081): Max retries\n: 서버 자체가 안뜬 경우</li>\n</ol>\n<h3 id=\"ide에서-디버깅\"><a href=\"#ide%EC%97%90%EC%84%9C-%EB%94%94%EB%B2%84%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IDE에서 디버깅</h3>\n<ol>\n<li>Application.java 를 찾는다, main 함수를 찾는다.</li>\n<li>main 함수내의 첫번째 소스코드 라인의 왼쪽에 동그란 breakpoint 를 찾아 활성화한다.</li>\n<li>main 함수 위에 조그만 \"Debug\"라는 링크를 클릭한다.(10초 정도 소요, 기다리셔야 합니다.)</li>\n<li>잠시후 디버거가 활성화되고, 브레이크 포인트에 실행이 멈춘다.</li>\n<li>Continue 라는 화살표 버튼을 클릭하여 디버거를 진행시킨다.</li>\n<li>다음으로, Order.java 의 첫번째 실행지점에 디버그 포인트를 설정한다:</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostPersist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// 이부분</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>그런다음, 앞서 주문을 넣어본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/inventories id=1 stock=10\nhttp POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3</code></pre>\n<ul>\n<li>위의 Order.java 에 디버거가 멈춤을 확인한후, variables 에서 local > this 객체의 내용을 확인한다.\n<br></li>\n</ul>\n<h3 id=\"order-aggregate-확장\"><a href=\"#order-aggregate-%ED%99%95%EC%9E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order aggregate 확장</h3>\n<ul>\n<li>Order.java에 다음필드를 추가:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    String address;</code></pre>\n<br>\n<h3 id=\"서비스를-재기동\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%9E%AC%EA%B8%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스를 재기동</h3>\n<ul>\n<li>추가된 필드를 입력해봄</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3 address=&quot;my home&quot;</code></pre>\n<br>\n<h3 id=\"실행중-프로세스-확인-및-삭제\"><a href=\"#%EC%8B%A4%ED%96%89%EC%A4%91-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%95%EC%9D%B8-%EB%B0%8F-%EC%82%AD%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행중 프로세스 확인 및 삭제</h3>\n<pre class=\"language-java\"><code class=\"language-java\">netstat <span class=\"token operator\">-</span>lntp <span class=\"token operator\">|</span> grep <span class=\"token operator\">:</span><span class=\"token number\">808</span> \nkill <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>process id<span class=\"token punctuation\">></span></span></code></pre>\n<p>혹은</p>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8081/tcp</code></pre>\n<br>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/J6yqEJrQUyk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"단위 마이크로 서비스의 실행","anchor":"#단위-마이크로-서비스의-실행"},{"depth":3,"value":"마이크로서비스의 실행","anchor":"#마이크로서비스의-실행"},{"depth":3,"value":"생성된 서비스의 기동","anchor":"#생성된-서비스의-기동"},{"depth":3,"value":"서비스 테스트","anchor":"#서비스-테스트"},{"depth":2,"value":"발생하는 오류 유형","anchor":"#발생하는-오류-유형"},{"depth":3,"value":"IDE에서 디버깅","anchor":"#ide에서-디버깅"},{"depth":3,"value":"Order aggregate 확장","anchor":"#order-aggregate-확장"},{"depth":3,"value":"서비스를 재기동","anchor":"#서비스를-재기동"},{"depth":3,"value":"실행중 프로세스 확인 및 삭제","anchor":"#실행중-프로세스-확인-및-삭제"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"템플릿/토핑 마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"구글 드라이브 예제"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/chat-gpt/","title":"ChatGPT 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test 생성 토핑(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/custom-template/","title":"커스텀 템플릿 객체별 속성"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/designing-template/","title":"커스텀 템플릿 만들기"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}